[{"id":"typescript","desc":"Collection of voice commands of the typescript language","label":"Typescript voice commands","grammar":{"en-US":[{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"},"parent":"sg1"},{"v":"8","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"doublecircle"}},{"v":"13","value":{"shape":"circle"}},{"v":"sg1","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(cursor, pointer)"}},{"v":"1","w":"2","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"line"}},{"v":"1","w":"5","value":{"label":"(symbol, letter)"}},{"v":"7","w":"5","value":{"label":"(symbol, letter)"}},{"v":"1","w":"7","value":{"label":"({ordinalNumber})","store":"leapSize","normalize":"ordinalNumber"}},{"v":"5","w":"6","value":{"label":"({term})","store":"symbol"}},{"v":"1","w":"8","value":{"label":"(begin, end)","store":"linePosition"}},{"v":"8","w":"10","value":{"label":"(line)"}},{"v":"1","w":"11","value":{"label":"(next)"}},{"v":"11","w":"13","value":{"label":"({number})","store":"leapSize"}},{"v":"11","w":"12","value":{"label":"(symbol)"}},{"v":"13","w":"12","value":{"label":"(symbol)"}}],"value":{"id":"cursor","label":"Move cursor","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Move cursor","desc":"Moves the cursor to a different line or token","impl":"\"use strict\";\r\nasync function cursor(args, editor, context) {\r\n    console.log('[Spoken]: Executing: \"cursor.\"');\r\n    if (args.linePosition != null) {\r\n        const pos = args.linePosition === LinePostionEnum.BEGIN ? 'BEGIN_LINE' : 'END_LINE';\r\n        return await editor.moveCursorTo(pos);\r\n    }\r\n    else if (args.line) {\r\n        return await editor.goToLine(args.line);\r\n    }\r\n    else if (!args.symbol) {\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo(null, undefined, nth);\r\n    }\r\n    else {\r\n        if (args.leapSize == undefined)\r\n            args.leapSize = '1';\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo('SYMBOL', args.symbol, nth);\r\n    }\r\n    return await editor.moveCursorTo('BEGIN_LINE');\r\n}\r\nvar LinePostionEnum;\r\n(function (LinePostionEnum) {\r\n    LinePostionEnum[LinePostionEnum[\"BEGIN\"] = 0] = \"BEGIN\";\r\n    LinePostionEnum[LinePostionEnum[\"END\"] = 1] = \"END\";\r\n})(LinePostionEnum || (LinePostionEnum = {}));\r\n// @ts-ignore\r\nreturn cursor;\r\n","phrases":["pointer line 1","cursor symbol temp","cursor 1ª symbol number","cursor begin line","cursor next symbol","pointer next 42 symbol"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"}},{"v":"13","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":" (declare, create)"}},{"v":"1","w":"1","value":{"label":" (a)"}},{"v":"1","w":"3","value":{"label":" (constant, variable)","store":"memType"}},{"v":"3","w":"5","value":{"label":" (called)"}},{"v":"5","w":"6","value":{"label":" ({term})","store":"name"}},{"v":"6","w":"11","value":{"label":" (of, λ)"}},{"v":"11","w":"11","value":{"label":"(the)"}},{"v":"11","w":"12","value":{"label":" (type)"}},{"v":"12","w":"13","value":{"label":" ({term})","store":"type"}},{"v":"6","w":"9","value":{"label":" (equals)"}},{"v":"13","w":"9","value":{"label":" (equals)"}},{"v":"6","w":"7","value":{"label":" (with, λ)"}},{"v":"13","w":"7","value":{"label":" (with, λ)"}},{"v":"7","w":"7","value":{"label":" (the)"}},{"v":"7","w":"9","value":{"label":" (value)"}},{"v":"9","w":"10","value":{"label":" ({term})","store":"value"}}],"value":{"id":"declare_variable","label":"New constant or variable","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"New constant or variable","desc":"Declares a new constant or variable in the current line","impl":"\"use strict\";\r\nasync function DeclareVariable(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"Declare a variable.\"');\r\n    const memType = command.memType === MemType.constant ? 'const ' : 'let ';\r\n    const type = command.type ? `:${command.type}` : '';\r\n    const value = command.value ? ` = ${command.value}` : '';\r\n    const text = `${memType}${command.name}${type}${value}`;\r\n    await editor.write(text);\r\n    return await editor.indentSelection([undefined, 0], [undefined, text.length]);\r\n}\r\nvar MemType;\r\n(function (MemType) {\r\n    MemType[MemType[\"constant\"] = 0] = \"constant\";\r\n    MemType[MemType[\"variable\"] = 1] = \"variable\";\r\n})(MemType || (MemType = {}));\r\nfunction sanitizeType(lang, type) {\r\n    const types = [\r\n        [['decimal', 'integer', 'inteiro', 'double', 'float'], 'number'],\r\n        [['char', 'text', 'character', 'texto'], 'string']\r\n    ];\r\n    const w = types.find(([f, t]) => f.includes(type));\r\n    return w ? w[1] : type;\r\n}\r\n// @ts-ignore\r\nreturn DeclareVariable;\r\n","phrases":["create constant called graph","declare variable called text with value value","create variable called graph equals number","create variable called text type graph value graph","declare constant called temp of type value equals graph","create variable called text of type text"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(go)"}},{"v":"1","w":"2","value":{"label":"(to)"}},{"v":"0","w":"3","value":{"label":"(line)"}},{"v":"1","w":"3","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"(line)"}},{"v":"3","w":"4","value":{"label":"({number})","store":"line"}}],"value":{"id":"go_to_line","label":"Change line","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Change line","desc":"Moves the cursor to a different line","impl":"\"use strict\";\r\nasync function goToLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"goToLine.\"');\r\n    return await editor.goToLine(command.line);\r\n}\r\n// @ts-ignore\r\nreturn goToLine;\r\n","phrases":["go to line 1","go line 1","line 42"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg16"},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"},"parent":"sg18"},{"v":"5","value":{"shape":"circle"},"parent":"sg16"},{"v":"sg16","value":{"shape":"circle"}},{"v":"sg18","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(new)"}},{"v":"5","w":"1","value":{"label":"(new)"}},{"v":"1","w":"2","value":{"label":"(line)"}},{"v":"5","w":"2","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"(above, below)","store":"position"}},{"v":"4","w":"3","value":{"label":"(above, below)","store":"position"}},{"v":"0","w":"4","value":{"label":"(line)"}},{"v":"0","w":"5","value":{"label":"(create)"}},{"v":"5","w":"5","value":{"label":"(a)"}}],"value":{"id":"new_line","label":"New line","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"New line","desc":"Creates a new line above or below the current line","impl":"\"use strict\";\r\nasync function newLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"new line.\"');\r\n    return await editor.newLine(command.position);\r\n}\r\n// @ts-ignore\r\nreturn newLine;\r\n","phrases":["new line","create new line","create line","new line below","line below","create new line below","create line above"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(print)"}},{"v":"0","w":"2","value":{"label":"(write)"}},{"v":"2","w":"1","value":{"label":"(down, λ)"}},{"v":"2","w":"3","value":{"label":"(it)"}},{"v":"3","w":"1","value":{"label":"(down, λ)"}},{"v":"1","w":"1","value":{"label":"({any})","store":"text"}}],"value":{"id":"write","label":"Write text","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Write text","desc":"Write some text in the editor","impl":"\"use strict\";\r\nasync function write(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"write.\"');\r\n    return await editor.write(command.text);\r\n}\r\n// @ts-ignore\r\nreturn write;\r\n","phrases":["print the universe is cracked","write down who are you","write it the universe is cracked"]}}],"pt-BR":[{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"},"parent":"sg3"},{"v":"8","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"doublecircle"}},{"v":"13","value":{"shape":"circle"}},{"v":"sg3","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(cursor, ponteiro)"}},{"v":"1","w":"2","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"line"}},{"v":"1","w":"5","value":{"label":"(símbolo, letra)"}},{"v":"7","w":"5","value":{"label":"(símbolo, letra)"}},{"v":"1","w":"7","value":{"label":"({ordinalNumber})","store":"leapSize","normalize":"ordinalNumber"}},{"v":"5","w":"6","value":{"label":"({term})","store":"symbol"}},{"v":"1","w":"8","value":{"label":"(começo, final)","store":"linePosition"}},{"v":"8","w":"10","value":{"label":"(linha)"}},{"v":"1","w":"11","value":{"label":"(próximo)"}},{"v":"11","w":"13","value":{"label":"({number})","store":"leapSize"}},{"v":"11","w":"12","value":{"label":"(símbolo, letra)"}},{"v":"13","w":"12","value":{"label":"(símbolo, letra)"}}],"value":{"id":"cursor","label":"Mover o cursor","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Mover o cursor","desc":"Move o cursor para uma linha ou símbolo","impl":"\"use strict\";\r\nasync function cursor(args, editor, context) {\r\n    console.log('[Spoken]: Executing: \"cursor.\"');\r\n    if (args.linePosition != null) {\r\n        const pos = args.linePosition === LinePostionEnum.BEGIN ? 'BEGIN_LINE' : 'END_LINE';\r\n        return await editor.moveCursorTo(pos);\r\n    }\r\n    else if (args.line) {\r\n        return await editor.goToLine(args.line);\r\n    }\r\n    else if (!args.symbol) {\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo(null, undefined, nth);\r\n    }\r\n    else {\r\n        if (args.leapSize == undefined)\r\n            args.leapSize = '1';\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo('SYMBOL', args.symbol, nth);\r\n    }\r\n    return await editor.moveCursorTo('BEGIN_LINE');\r\n}\r\nvar LinePostionEnum;\r\n(function (LinePostionEnum) {\r\n    LinePostionEnum[LinePostionEnum[\"BEGIN\"] = 0] = \"BEGIN\";\r\n    LinePostionEnum[LinePostionEnum[\"END\"] = 1] = \"END\";\r\n})(LinePostionEnum || (LinePostionEnum = {}));\r\n// @ts-ignore\r\nreturn cursor;\r\n","phrases":["ponteiro linha 42","ponteiro letra valor","cursor primeiro letra valor","cursor final linha","ponteiro próximo símbolo","ponteiro próximo 1 símbolo"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"}},{"v":"13","value":{"shape":"doublecircle"}},{"v":"14","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":" (declare, crie)"}},{"v":"1","w":"2","value":{"label":" (uma)"}},{"v":"1","w":"3","value":{"label":" (constante, variável)","store":"memType"}},{"v":"2","w":"3","value":{"label":" (constante, variável)","store":"memType"}},{"v":"3","w":"5","value":{"label":" (chamada)"}},{"v":"5","w":"6","value":{"label":" ({term})","store":"name"}},{"v":"6","w":"11","value":{"label":" (do)"}},{"v":"6","w":"12","value":{"label":" (tipo)"}},{"v":"11","w":"12","value":{"label":" (tipo)"}},{"v":"12","w":"13","value":{"label":" ({term})","store":"type"}},{"v":"6","w":"14","value":{"label":" (igual)"}},{"v":"13","w":"14","value":{"label":" (igual)"}},{"v":"14","w":"9","value":{"label":" (a)"}},{"v":"6","w":"7","value":{"label":" (com)"}},{"v":"13","w":"7","value":{"label":" (com)"}},{"v":"6","w":"8","value":{"label":" (o)"}},{"v":"7","w":"8","value":{"label":" (o)"}},{"v":"13","w":"8","value":{"label":" (o)"}},{"v":"6","w":"9","value":{"label":" (valor)"}},{"v":"7","w":"9","value":{"label":" (valor)"}},{"v":"8","w":"9","value":{"label":" (valor)"}},{"v":"13","w":"9","value":{"label":" (valor)"}},{"v":"9","w":"10","value":{"label":" ({term})","store":"value"}},{"v":"14","w":"10","value":{"label":" ({term})","store":"value"}}],"value":{"id":"declare_variable","label":"Nova constante ou variável","lang":"pt-BR","langName":"Portugês","pad":"0.2","rankdir":"LR","title":"Nova constante ou variável","desc":"Declara uma nova constante ou variável na linha atual","impl":"\"use strict\";\r\nasync function DeclareVariable(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"Declare a variable.\"');\r\n    const memType = command.memType === MemType.constant ? 'const ' : 'let ';\r\n    const type = command.type ? `:${command.type}` : '';\r\n    const value = command.value ? ` = ${command.value}` : '';\r\n    const text = `${memType}${command.name}${type}${value}`;\r\n    await editor.write(text);\r\n    return await editor.indentSelection([undefined, 0], [undefined, text.length]);\r\n}\r\nvar MemType;\r\n(function (MemType) {\r\n    MemType[MemType[\"constant\"] = 0] = \"constant\";\r\n    MemType[MemType[\"variable\"] = 1] = \"variable\";\r\n})(MemType || (MemType = {}));\r\nfunction sanitizeType(lang, type) {\r\n    const types = [\r\n        [['decimal', 'integer', 'inteiro', 'double', 'float'], 'number'],\r\n        [['char', 'text', 'character', 'texto'], 'string']\r\n    ];\r\n    const w = types.find(([f, t]) => f.includes(type));\r\n    return w ? w[1] : type;\r\n}\r\n// @ts-ignore\r\nreturn DeclareVariable;\r\n","phrases":["crie uma variável chamada lista","declare variável chamada lista","declare uma variável chamada texto com o valor valor","declare uma constante chamada temp com valor valor","crie uma constante chamada valor o valor texto","declare uma constante chamada valor valor numero","crie uma constante chamada numero do tipo lista com o valor temp","crie uma constante chamada temp do tipo valor com valor valor","crie uma variável chamada valor do tipo numero o valor numero","declare uma variável chamada texto do tipo texto valor valor","crie uma variável chamada temp do tipo numero igual a valor","crie uma variável chamada lista do tipo valor igual lista","crie uma constante chamada texto tipo lista com o valor texto","declare uma variável chamada temp tipo lista com valor texto","declare uma variável chamada temp tipo texto o valor temp","crie uma constante chamada lista tipo lista valor lista"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(vá, vai)"}},{"v":"1","w":"2","value":{"label":"(para)"}},{"v":"2","w":"5","value":{"label":"(a)"}},{"v":"0","w":"3","value":{"label":"(linha)"}},{"v":"1","w":"3","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"(linha)"}},{"v":"5","w":"3","value":{"label":"(linha)"}},{"v":"3","w":"4","value":{"label":"({number})","store":"line"}}],"value":{"id":"go_to_line","label":"Trocar linha","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Trocar linha","desc":"Move or cursor para uma linha diferente","impl":"\"use strict\";\r\nasync function goToLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"goToLine.\"');\r\n    return await editor.goToLine(command.line);\r\n}\r\n// @ts-ignore\r\nreturn goToLine;\r\n","phrases":["vá para linha 1","vá para a linha 1","vai linha 1","linha 42"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg19"},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"},"parent":"sg21"},{"v":"5","value":{"shape":"circle"},"parent":"sg19"},{"v":"sg19","value":{"shape":"circle"}},{"v":"sg21","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(nova)"}},{"v":"5","w":"1","value":{"label":"(nova)"}},{"v":"1","w":"2","value":{"label":"(linha)"}},{"v":"5","w":"2","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"(acima, abaixo)","store":"position"}},{"v":"4","w":"3","value":{"label":"(acima, abaixo)","store":"position"}},{"v":"0","w":"4","value":{"label":"(linha)"}},{"v":"0","w":"5","value":{"label":"(crie)"}},{"v":"5","w":"5","value":{"label":"(uma)"}},{"v":"4","w":"2","value":{"label":"(nova)"}}],"value":{"id":"new_line","label":"Linha nova","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Linha nova","desc":"Cria uma linha nova abaixo ou acima da linha atual","impl":"\"use strict\";\r\nasync function newLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"new line.\"');\r\n    return await editor.newLine(command.position);\r\n}\r\n// @ts-ignore\r\nreturn newLine;\r\n","phrases":["nova linha","linha nova","crie nova linha","crie linha","nova linha acima","linha nova acima","linha acima","crie nova linha abaixo","crie linha acima"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(escreva)"}},{"v":"1","w":"1","value":{"label":"({any})","store":"text"}}],"value":{"id":"write","label":"Escrever texto","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Escrever texto","desc":"Escreve um pedaço de texto no editor de texto","impl":"\"use strict\";\r\nasync function write(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"write.\"');\r\n    return await editor.write(command.text);\r\n}\r\n// @ts-ignore\r\nreturn write;\r\n","phrases":["escreva isto é um teste"]}}]}}]