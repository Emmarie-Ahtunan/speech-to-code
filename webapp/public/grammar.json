{"normalizers":{"ordinalNumber":"function ordinalNumber(lang) {\r\n        function OrdinalNumbers(last, tenFirstNumbers) {\r\n            return (word, compareStr) => {\r\n                if (compareStr(word, last)) return '-1'\r\n                if (!Number.isNaN(parseInt(word, 10)))\r\n                    return parseInt(word, 10).toString()\r\n\r\n                const i = tenFirstNumbers.findIndex((a) => compareStr(a, word))\r\n\r\n                return i === -1 ? undefined : (i + 1).toString()\r\n            }\r\n        }\r\n\r\n        if (lang === 'pt-BR')\r\n            return OrdinalNumbers('último', [\r\n                'primeiro',\r\n                'segundo',\r\n                'terceiro',\r\n                'quarto',\r\n                'quinto',\r\n                'sexto',\r\n                'sétimo',\r\n                'oitavo',\r\n                'nono',\r\n                'décimo',\r\n            ])\r\n\r\n        return OrdinalNumbers('last', [\r\n            'first',\r\n            'second',\r\n            'third',\r\n            'fourth',\r\n            'fifth',\r\n            'sixth',\r\n            'seventh',\r\n            'eighth',\r\n            'ninth',\r\n            'tenth',\r\n        ])\r\n    }","jsCommonTypes":"function jsCommonTypes(lang) {\r\n        return (word, compareStr) => {\r\n            if (lang === 'pt-BR') {\r\n                const types = {\r\n                    'número': 'number',\r\n                    'texto': 'string',\r\n                    'lógico': 'boolean',\r\n                    'data': 'Date'\r\n                };\r\n                for (const key in types) {\r\n                    if (compareStr(word, key))\r\n                        return types[key];\r\n                }\r\n            }\r\n            return word;\r\n        };\r\n    }"},"templates":{"{any}":{"value":"(.*)","examples":{"pt-BR":["quem é você","isto é um teste"],"en-US":["who are you","the universe is cracked"]}},"{term}":{"value":"(\\S+)","examples":{"pt-BR":["valor","lista","numero","texto","temp","a"],"en-US":["value","graph","number","text","temp","a"]}},"{ordinalNumber}":{"value":"(\\S+)","examples":{"pt-BR":["1ª","42ª","último","primeiro","sétimo"],"en-US":["1ª","42ª","last","first","fourth"]}},"{numeral}":{"value":"(\\d+)","examples":{"pt-BR":["1","42"],"en-US":["1","42"]}},"{number}":{"value":"(\\d+)","examples":{"pt-BR":["1","42"],"en-US":["1","42"]}},"{char}":{"value":"(.)","examples":{"pt-BR":["a","B","A","z"],"en-US":["g","K","M"]}}},"stopWords":{"en-US":{"words":["a -> P1 != (letter|symbol|word)","the","with","you","can","please","of","it","its","it's","is","are","was","were"],"expressions":[]},"pt-BR":{"words":["a -> P1 != (letra|símbolo|palavra)","o","você","com","pode","do","de","da","dos","das","para","é","era","estava","como","uma","um","vá"],"expressions":["por favor"]}},"modules":[{"id":"typescript","grammar":{"en-US":[{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"},"parent":"sg1"},{"v":"8","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"doublecircle"}},{"v":"13","value":{"shape":"circle"}},{"v":"sg1","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(cursor, pointer)"}},{"v":"1","w":"2","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"line"}},{"v":"1","w":"5","value":{"label":"(symbol, letter)"}},{"v":"7","w":"5","value":{"label":"(symbol, letter)"}},{"v":"1","w":"7","value":{"label":"({ordinalNumber})","store":"leapSize","normalizer":"ordinalNumber"}},{"v":"5","w":"6","value":{"label":"({char})","store":"symbol"}},{"v":"1","w":"8","value":{"label":"(begin, end)","store":"linePosition"}},{"v":"8","w":"10","value":{"label":"(line)"}},{"v":"1","w":"11","value":{"label":"(next)"}},{"v":"11","w":"13","value":{"label":"({number})","store":"leapSize"}},{"v":"11","w":"12","value":{"label":"(symbol)"}},{"v":"13","w":"12","value":{"label":"(symbol)"}}],"value":{"id":"cursor","label":"Move cursor","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Move cursor","desc":"Moves the cursor to a different line or token","impl":"\"use strict\";\r\nasync function cursor(args, editor, context) {\r\n    console.log('[Spoken]: Executing: \"cursor.\"');\r\n    if (args.linePosition != null) {\r\n        const pos = args.linePosition === LinePostionEnum.BEGIN ? 'BEGIN_LINE' : 'END_LINE';\r\n        return await editor.moveCursorTo(pos);\r\n    }\r\n    else if (args.line) {\r\n        return await editor.goToLine(args.line);\r\n    }\r\n    else if (!args.symbol) {\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo(null, undefined, nth);\r\n    }\r\n    else {\r\n        if (args.leapSize == undefined)\r\n            args.leapSize = '1';\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo('SYMBOL', args.symbol, nth);\r\n    }\r\n    return await editor.moveCursorTo('BEGIN_LINE');\r\n}\r\nvar LinePostionEnum;\r\n(function (LinePostionEnum) {\r\n    LinePostionEnum[LinePostionEnum[\"BEGIN\"] = 0] = \"BEGIN\";\r\n    LinePostionEnum[LinePostionEnum[\"END\"] = 1] = \"END\";\r\n})(LinePostionEnum || (LinePostionEnum = {}));\r\n// @ts-ignore\r\nreturn cursor;\r\n","phrases":["pointer line 1","pointer letter g","cursor last symbol g","cursor end line","cursor next symbol","cursor next 42 symbol"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"12","value":{"shape":"circle"}},{"v":"13","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":" (declare, create, new)"}},{"v":"1","w":"3","value":{"label":" (constant, variable)","store":"memType"}},{"v":"3","w":"5","value":{"label":" (called, named)"}},{"v":"5","w":"6","value":{"label":" ({term})","store":"name"}},{"v":"6","w":"12","value":{"label":" (type)"}},{"v":"12","w":"13","value":{"label":" ({term})","store":"type","normalizer":"jsCommonTypes"}},{"v":"6","w":"9","value":{"label":" (equals, value)"}},{"v":"13","w":"9","value":{"label":" (equals, value)"}},{"v":"9","w":"10","value":{"label":" ({term})","store":"value"}}],"value":{"id":"declare_variable","label":"New constant or variable","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"New constant or variable","desc":"Declares a new constant or variable in the current line","impl":"\"use strict\";\r\nasync function DeclareVariable(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"Declare a variable.\"');\r\n    const memType = command.memType === MemType.constant ? 'const ' : 'let ';\r\n    const type = command.type ? `:${command.type}` : '';\r\n    const value = command.value ? ` = ${command.value}` : '';\r\n    const text = `${memType}${command.name}${type}${value}`;\r\n    await editor.write(text);\r\n    return await editor.indentSelection([undefined, 0], [undefined, text.length]);\r\n}\r\nvar MemType;\r\n(function (MemType) {\r\n    MemType[MemType[\"constant\"] = 0] = \"constant\";\r\n    MemType[MemType[\"variable\"] = 1] = \"variable\";\r\n})(MemType || (MemType = {}));\r\n// @ts-ignore\r\nreturn DeclareVariable;\r\n","phrases":["create constant called a","new variable called number value value","new constant called number type value equals temp","new variable called graph type graph"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(go)"}},{"v":"1","w":"2","value":{"label":"(to)"}},{"v":"0","w":"3","value":{"label":"(line)"}},{"v":"1","w":"3","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"(line)"}},{"v":"3","w":"4","value":{"label":"({number})","store":"line"}}],"value":{"id":"go_to_line","label":"Change line","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Change line","desc":"Moves the cursor to a different line","impl":"\"use strict\";\r\nasync function goToLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"goToLine.\"');\r\n    return await editor.goToLine(command.line);\r\n}\r\n// @ts-ignore\r\nreturn goToLine;\r\n","phrases":["go to line 42","go line 42","line 42"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg15"},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"},"parent":"sg17"},{"v":"5","value":{"shape":"circle"},"parent":"sg15"},{"v":"sg15","value":{"shape":"circle"}},{"v":"sg17","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(new)"}},{"v":"5","w":"1","value":{"label":"(new)"}},{"v":"1","w":"2","value":{"label":"(line)"}},{"v":"5","w":"2","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"(above, below)","store":"position"}},{"v":"4","w":"3","value":{"label":"(above, below)","store":"position"}},{"v":"0","w":"4","value":{"label":"(line)"}},{"v":"0","w":"5","value":{"label":"(create)"}},{"v":"5","w":"5","value":{"label":"(a)"}}],"value":{"id":"new_line","label":"New line","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"New line","desc":"Creates a new line above or below the current line","impl":"\"use strict\";\r\nasync function newLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"new line.\"');\r\n    return await editor.newLine(command.position);\r\n}\r\n// @ts-ignore\r\nreturn newLine;\r\n","phrases":["new line","create new line","create line","new line above","line below","create new line below","create line above"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"circle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"},"parent":"sg22"},{"v":"13","value":{"shape":"circle"}},{"v":"14","value":{"shape":"circle"}},{"v":"15","value":{"shape":"circle"}},{"v":"16","value":{"shape":"circle"}},{"v":"17","value":{"shape":"doublecircle"}},{"v":"sg22","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(select)"}},{"v":"1","w":"2","value":{"label":"(letter, symbol)"}},{"v":"2","w":"3","value":{"label":"({char})","store":"word"}},{"v":"1","w":"4","value":{"label":"(word)"}},{"v":"4","w":"3","value":{"label":"({term})","store":"word"}},{"v":"1","w":"5","value":{"label":"(from)"}},{"v":"5","w":"13","value":{"label":"(line)","store":"selectLine"}},{"v":"13","w":"14","value":{"label":"({number})","store":"from"}},{"v":"14","w":"15","value":{"label":"(to)"}},{"v":"15","w":"16","value":{"label":"(line, λ)"}},{"v":"16","w":"17","value":{"label":"({number})","store":"to"}},{"v":"5","w":"11","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"fromPosition"}},{"v":"5","w":"6","value":{"label":"(letter, symbol)"}},{"v":"11","w":"6","value":{"label":"(letter, symbol)"}},{"v":"6","w":"7","value":{"label":"({char})","store":"from"}},{"v":"7","w":"8","value":{"label":"(to)"}},{"v":"8","w":"9","value":{"label":"(letter, symbol, λ)"}},{"v":"12","w":"9","value":{"label":"(letter, symbol, λ)"}},{"v":"8","w":"12","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"toPosition"}},{"v":"9","w":"10","value":{"label":"({char})","store":"to"}}],"value":{"id":"select","label":"Select","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Select","desc":"Select a piece of the text in the current line","impl":"\"use strict\";\r\nasync function Select(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"select\"');\r\n    if (command.selectLine != undefined) {\r\n        return await editor.select(parseInt(command.from, 10), parseInt(command.to, 10), true);\r\n    }\r\n    else if (command.word != undefined) {\r\n        const pos = await editor.findPositionOf(command.word);\r\n        return await editor.select(pos[0][0], pos[0][1], false);\r\n    }\r\n    const from = command.from || '';\r\n    const to = command.to || '';\r\n    const fromPos = parseInt(command.fromPosition, 10) || 1;\r\n    const toPos = parseInt(command.toPosition, 10) || 1;\r\n    if (from === '' || to === '') {\r\n        throw new Error('Invalid arguments!');\r\n    }\r\n    const matchFrom = await editor.findPositionOf(from);\r\n    const matchTo = await editor.findPositionOf(to);\r\n    return await editor.select(matchFrom[fromPos - 1][0], matchTo[toPos - 1][0], false);\r\n}\r\n// @ts-ignore\r\nreturn Select;\r\n","phrases":["select symbol g","select word a","select from letter M to symbol K","select from letter K to last letter M","select from 42ª symbol M to symbol M","select from fourth letter K to 42ª symbol g","select from line 1 to 1"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(print)"}},{"v":"0","w":"2","value":{"label":"(write)"}},{"v":"2","w":"1","value":{"label":"(down, λ)"}},{"v":"2","w":"3","value":{"label":"(it)"}},{"v":"3","w":"1","value":{"label":"(down, λ)"}},{"v":"1","w":"1","value":{"label":"({any})","store":"text"}}],"value":{"id":"write","label":"Write text","lang":"en-US","langName":"English","pad":"0.2","disableStopWords":"true","rankdir":"LR","title":"Write text","desc":"Write some text in the editor","impl":"\"use strict\";\r\nasync function write(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"write.\"');\r\n    return await editor.write(command.text);\r\n}\r\n// @ts-ignore\r\nreturn write;\r\n","phrases":["print who are you","write down the universe is cracked","write it who are you"]}}],"pt-BR":[{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"},"parent":"sg3"},{"v":"8","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"doublecircle"}},{"v":"13","value":{"shape":"circle"}},{"v":"sg3","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(cursor, ponteiro)"}},{"v":"1","w":"2","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"line"}},{"v":"1","w":"5","value":{"label":"(símbolo, letra)"}},{"v":"7","w":"5","value":{"label":"(símbolo, letra)"}},{"v":"1","w":"7","value":{"label":"({ordinalNumber})","store":"leapSize","normalizer":"ordinalNumber"}},{"v":"5","w":"6","value":{"label":"({char})","store":"symbol"}},{"v":"1","w":"8","value":{"label":"(começo, final)","store":"linePosition"}},{"v":"8","w":"10","value":{"label":"(linha)"}},{"v":"1","w":"11","value":{"label":"(próximo)"}},{"v":"11","w":"13","value":{"label":"({number})","store":"leapSize"}},{"v":"11","w":"12","value":{"label":"(símbolo, letra)"}},{"v":"13","w":"12","value":{"label":"(símbolo, letra)"}}],"value":{"id":"cursor","label":"Mover o cursor","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Mover o cursor","desc":"Move o cursor para uma linha ou símbolo","impl":"\"use strict\";\r\nasync function cursor(args, editor, context) {\r\n    console.log('[Spoken]: Executing: \"cursor.\"');\r\n    if (args.linePosition != null) {\r\n        const pos = args.linePosition === LinePostionEnum.BEGIN ? 'BEGIN_LINE' : 'END_LINE';\r\n        return await editor.moveCursorTo(pos);\r\n    }\r\n    else if (args.line) {\r\n        return await editor.goToLine(args.line);\r\n    }\r\n    else if (!args.symbol) {\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo(null, undefined, nth);\r\n    }\r\n    else {\r\n        if (args.leapSize == undefined)\r\n            args.leapSize = '1';\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo('SYMBOL', args.symbol, nth);\r\n    }\r\n    return await editor.moveCursorTo('BEGIN_LINE');\r\n}\r\nvar LinePostionEnum;\r\n(function (LinePostionEnum) {\r\n    LinePostionEnum[LinePostionEnum[\"BEGIN\"] = 0] = \"BEGIN\";\r\n    LinePostionEnum[LinePostionEnum[\"END\"] = 1] = \"END\";\r\n})(LinePostionEnum || (LinePostionEnum = {}));\r\n// @ts-ignore\r\nreturn cursor;\r\n","phrases":["ponteiro linha 1","cursor símbolo B","ponteiro sétimo símbolo A","ponteiro começo linha","cursor próximo símbolo","cursor próximo 42 letra"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"}},{"v":"13","value":{"shape":"doublecircle"}},{"v":"14","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":" (declare, crie)"}},{"v":"1","w":"2","value":{"label":" (uma)"}},{"v":"1","w":"3","value":{"label":" (constante, variável)","store":"memType"}},{"v":"2","w":"3","value":{"label":" (constante, variável)","store":"memType"}},{"v":"3","w":"5","value":{"label":" (chamada)"}},{"v":"5","w":"6","value":{"label":" ({term})","store":"name"}},{"v":"6","w":"11","value":{"label":" (do)"}},{"v":"6","w":"12","value":{"label":" (tipo)"}},{"v":"11","w":"12","value":{"label":" (tipo)"}},{"v":"12","w":"13","value":{"label":" ({term})","store":"type","normalizer":"jsCommonTypes"}},{"v":"6","w":"14","value":{"label":" (igual)"}},{"v":"13","w":"14","value":{"label":" (igual)"}},{"v":"14","w":"9","value":{"label":" (a)"}},{"v":"6","w":"7","value":{"label":" (com)"}},{"v":"13","w":"7","value":{"label":" (com)"}},{"v":"6","w":"8","value":{"label":" (o)"}},{"v":"7","w":"8","value":{"label":" (o)"}},{"v":"13","w":"8","value":{"label":" (o)"}},{"v":"6","w":"9","value":{"label":" (valor)"}},{"v":"7","w":"9","value":{"label":" (valor)"}},{"v":"8","w":"9","value":{"label":" (valor)"}},{"v":"13","w":"9","value":{"label":" (valor)"}},{"v":"9","w":"10","value":{"label":" ({term})","store":"value"}},{"v":"14","w":"10","value":{"label":" ({term})","store":"value"}}],"value":{"id":"declare_variable","label":"Nova constante ou variável","lang":"pt-BR","langName":"Portugês","pad":"0.2","rankdir":"LR","title":"Nova constante ou variável","desc":"Declara uma nova constante ou variável na linha atual","impl":"\"use strict\";\r\nasync function DeclareVariable(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"Declare a variable.\"');\r\n    const memType = command.memType === MemType.constant ? 'const ' : 'let ';\r\n    const type = command.type ? `:${command.type}` : '';\r\n    const value = command.value ? ` = ${command.value}` : '';\r\n    const text = `${memType}${command.name}${type}${value}`;\r\n    await editor.write(text);\r\n    return await editor.indentSelection([undefined, 0], [undefined, text.length]);\r\n}\r\nvar MemType;\r\n(function (MemType) {\r\n    MemType[MemType[\"constant\"] = 0] = \"constant\";\r\n    MemType[MemType[\"variable\"] = 1] = \"variable\";\r\n})(MemType || (MemType = {}));\r\n// @ts-ignore\r\nreturn DeclareVariable;\r\n","phrases":["crie uma variável chamada valor","crie constante chamada valor","declare uma constante chamada valor com o valor numero","crie uma variável chamada valor com valor temp","crie uma constante chamada texto o valor valor","declare uma variável chamada texto valor lista","crie uma constante chamada texto do tipo valor com o valor temp","crie uma variável chamada numero do tipo texto com valor a","crie uma variável chamada temp do tipo valor o valor valor","crie uma constante chamada valor do tipo temp valor texto","crie uma constante chamada lista do tipo texto igual a lista","crie uma constante chamada temp do tipo a igual numero","crie uma variável chamada texto tipo valor com o valor a","crie uma variável chamada lista tipo a com valor texto","crie uma constante chamada lista tipo a o valor valor","crie uma constante chamada lista tipo temp valor lista"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(vá, vai)"}},{"v":"1","w":"2","value":{"label":"(para)"}},{"v":"2","w":"5","value":{"label":"(a)"}},{"v":"0","w":"3","value":{"label":"(linha)"}},{"v":"1","w":"3","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"(linha)"}},{"v":"5","w":"3","value":{"label":"(linha)"}},{"v":"3","w":"4","value":{"label":"({number})","store":"line"}}],"value":{"id":"go_to_line","label":"Trocar linha","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Trocar linha","desc":"Move or cursor para uma linha diferente","impl":"\"use strict\";\r\nasync function goToLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"goToLine.\"');\r\n    return await editor.goToLine(command.line);\r\n}\r\n// @ts-ignore\r\nreturn goToLine;\r\n","phrases":["vai para linha 42","vá para a linha 1","vá linha 1","linha 1"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg18"},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"},"parent":"sg20"},{"v":"5","value":{"shape":"circle"},"parent":"sg18"},{"v":"sg18","value":{"shape":"circle"}},{"v":"sg20","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(nova)"}},{"v":"5","w":"1","value":{"label":"(nova)"}},{"v":"1","w":"2","value":{"label":"(linha)"}},{"v":"5","w":"2","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"(acima, abaixo)","store":"position"}},{"v":"4","w":"3","value":{"label":"(acima, abaixo)","store":"position"}},{"v":"0","w":"4","value":{"label":"(linha)"}},{"v":"0","w":"5","value":{"label":"(crie)"}},{"v":"5","w":"5","value":{"label":"(uma)"}},{"v":"4","w":"2","value":{"label":"(nova)"}}],"value":{"id":"new_line","label":"Linha nova","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Linha nova","desc":"Cria uma linha nova abaixo ou acima da linha atual","impl":"\"use strict\";\r\nasync function newLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"new line.\"');\r\n    return await editor.newLine(command.position);\r\n}\r\n// @ts-ignore\r\nreturn newLine;\r\n","phrases":["nova linha","linha nova","crie nova linha","crie linha","nova linha acima","linha nova acima","linha acima","crie nova linha acima","crie linha acima"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg23"},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"},"parent":"sg25"},{"v":"5","value":{"shape":"circle"},"parent":"sg23"},{"v":"sg23","value":{"shape":"circle"}},{"v":"sg25","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(nova)"}},{"v":"5","w":"1","value":{"label":"(nova)"}},{"v":"1","w":"2","value":{"label":"(linha)"}},{"v":"5","w":"2","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"(acima, abaixo)","store":"position"}},{"v":"4","w":"3","value":{"label":"(acima, abaixo)","store":"position"}},{"v":"0","w":"4","value":{"label":"(linha)"}},{"v":"0","w":"5","value":{"label":"(crie)"}},{"v":"5","w":"5","value":{"label":"(uma)"}},{"v":"4","w":"2","value":{"label":"(nova)"}}],"value":{"id":"select","label":"Linha nova","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Linha nova","desc":"Cria uma linha nova abaixo ou acima da linha atual","impl":"\"use strict\";\r\nasync function Select(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"select\"');\r\n    if (command.selectLine != undefined) {\r\n        return await editor.select(parseInt(command.from, 10), parseInt(command.to, 10), true);\r\n    }\r\n    else if (command.word != undefined) {\r\n        const pos = await editor.findPositionOf(command.word);\r\n        return await editor.select(pos[0][0], pos[0][1], false);\r\n    }\r\n    const from = command.from || '';\r\n    const to = command.to || '';\r\n    const fromPos = parseInt(command.fromPosition, 10) || 1;\r\n    const toPos = parseInt(command.toPosition, 10) || 1;\r\n    if (from === '' || to === '') {\r\n        throw new Error('Invalid arguments!');\r\n    }\r\n    const matchFrom = await editor.findPositionOf(from);\r\n    const matchTo = await editor.findPositionOf(to);\r\n    return await editor.select(matchFrom[fromPos - 1][0], matchTo[toPos - 1][0], false);\r\n}\r\n// @ts-ignore\r\nreturn Select;\r\n","phrases":["nova linha","linha nova","crie nova linha","crie linha","nova linha abaixo","linha nova acima","linha acima","crie nova linha acima","crie linha acima"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(escreva)"}},{"v":"1","w":"1","value":{"label":"({any})","store":"text"}}],"value":{"id":"write","label":"Escrever texto","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","disableStopWords":"true","title":"Escrever texto","desc":"Escreve um pedaço de texto no editor de texto","impl":"\"use strict\";\r\nasync function write(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"write.\"');\r\n    return await editor.write(command.text);\r\n}\r\n// @ts-ignore\r\nreturn write;\r\n","phrases":["escreva quem é você"]}}]},"desc":"Collection of voice commands of the typescript language","label":"Typescript voice commands"}]}