{"normalizers":{"ordinalNumber":"function ordinalNumber(lang) {\r\n        function OrdinalNumbers(last, tenFirstNumbers) {\r\n            return (word, compareStr) => {\r\n                if (compareStr(word, last)) return '-1'\r\n                if (!Number.isNaN(parseInt(word, 10)))\r\n                    return parseInt(word, 10).toString()\r\n\r\n                const i = tenFirstNumbers.findIndex((a) => compareStr(a, word))\r\n\r\n                return i === -1 ? undefined : (i + 1).toString()\r\n            }\r\n        }\r\n\r\n        if (lang === 'pt-BR')\r\n            return OrdinalNumbers('último', [\r\n                'primeiro',\r\n                'segundo',\r\n                'terceiro',\r\n                'quarto',\r\n                'quinto',\r\n                'sexto',\r\n                'sétimo',\r\n                'oitavo',\r\n                'nono',\r\n                'décimo',\r\n            ])\r\n\r\n        return OrdinalNumbers('last', [\r\n            'first',\r\n            'second',\r\n            'third',\r\n            'fourth',\r\n            'fifth',\r\n            'sixth',\r\n            'seventh',\r\n            'eighth',\r\n            'ninth',\r\n            'tenth',\r\n        ])\r\n    }","boolean":"function boolean(lang) {\r\n        return function(word, compareStr) {\r\n            return word != undefined ? true : false\r\n        }\r\n    }","identity":"function identity(lang) {\r\n        return function(word, compareStr) {\r\n            return word\r\n        }\r\n    }","elementarMathOperation":"function elementarMathOperation(lang) {\r\n        const enUS = [['plus', '+'], ['times', '*'], ['minus', '-'], ['divided', '/']];\r\n        const ptBR = [['mais', '+'], ['vezes', '*'], ['menos', '-'], ['dividido', '/']];\r\n        const langs = {\r\n            'en-US': enUS,\r\n            'pt-BR': ptBR\r\n        };\r\n        return (word, compareStr) => {\r\n            const op = langs[lang].find(([name]) => compareStr(name, word)) || [];\r\n            return op[1];\r\n        };\r\n    }"},"templates":{"{any}":{"value":"(.*)","examples":{"pt-BR":["quem é você","isto é um teste"],"en-US":["who are you","the universe is cracked"]}},"{term}":{"value":"^(?![\\* ]$).*","examples":{"pt-BR":["valor","lista","numero","texto","temp","a"],"en-US":["value","graph","number","text","temp","a"]}},"{ordinalNumber}":{"value":"(\\S+)","examples":{"pt-BR":["1ª","42ª","último","primeiro","sétimo"],"en-US":["1ª","42ª","last","first","fourth"]}},"{numeral}":{"value":"(\\d+)","examples":{"pt-BR":["1","42"],"en-US":["1","42"]}},"{number}":{"value":"(\\d+)","examples":{"pt-BR":["1","42"],"en-US":["1","42"]}},"{char}":{"value":"(.)","examples":{"pt-BR":["a","B","A","z"],"en-US":["g","K","M"]}}},"stopWords":{"en-US":{"words":["a -> P1 != (letter|symbol|word)","the","with","you","can","please","from -> S != (to)","to -> S != (from)","of","it","its","it's","is","are","was","were","in"],"expressions":[]},"pt-BR":{"words":["a -> P1 != (letra|símbolo|palavra)","o -> P1 != (letra|símbolo|palavra)","você","com","pode","na","do -> S != (até)","de -> S != (até)","da -> S != (até)","dos","das","para","é","era","estava","como","uma","um","vá"],"expressions":["por favor"]}},"modules":[{"id":"typescript","grammar":{"en-US":[{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"},"parent":"sg1"},{"v":"8","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"doublecircle"}},{"v":"13","value":{"shape":"circle"}},{"v":"sg1","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(cursor, pointer)"}},{"v":"1","w":"2","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"line"}},{"v":"1","w":"5","value":{"label":"(symbol, letter)"}},{"v":"7","w":"5","value":{"label":"(symbol, letter)"}},{"v":"1","w":"7","value":{"label":"({ordinalNumber})","store":"leapSize","normalizer":"ordinalNumber"}},{"v":"5","w":"6","value":{"label":"({char})","store":"symbol"}},{"v":"1","w":"8","value":{"label":"(begin, end)","store":"linePosition"}},{"v":"8","w":"10","value":{"label":"(line)"}},{"v":"1","w":"11","value":{"label":"(next)"}},{"v":"11","w":"13","value":{"label":"({number})","store":"leapSize"}},{"v":"11","w":"12","value":{"label":"(symbol)"}},{"v":"13","w":"12","value":{"label":"(symbol)"}}],"value":{"id":"cursor","label":"Move cursor","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Move cursor","desc":"Moves the cursor to a different line or token","impl":"\"use strict\";\r\nasync function cursor(args, editor, context) {\r\n    console.log('[Spoken]: Executing: \"cursor.\"');\r\n    if (args.linePosition != null) {\r\n        const pos = args.linePosition === LinePostionEnum.BEGIN ? 'BEGIN_LINE' : 'END_LINE';\r\n        return await editor.moveCursorTo(pos);\r\n    }\r\n    else if (args.line) {\r\n        return await editor.goToLine(args.line);\r\n    }\r\n    else if (!args.symbol) {\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo(null, undefined, nth);\r\n    }\r\n    else {\r\n        if (args.leapSize == undefined)\r\n            args.leapSize = '1';\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo('SYMBOL', args.symbol, nth);\r\n    }\r\n    return await editor.moveCursorTo('BEGIN_LINE');\r\n}\r\nvar LinePostionEnum;\r\n(function (LinePostionEnum) {\r\n    LinePostionEnum[LinePostionEnum[\"BEGIN\"] = 0] = \"BEGIN\";\r\n    LinePostionEnum[LinePostionEnum[\"END\"] = 1] = \"END\";\r\n})(LinePostionEnum || (LinePostionEnum = {}));\r\n// @ts-ignore\r\nreturn cursor;\r\n","phrases":["pointer line 42","cursor letter g","cursor fourth symbol K","cursor end line","cursor next symbol","cursor next 1 symbol"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(expression)"}},{"v":"1","w":"2","value":{"label":"([expressions])","store":"left"}},{"v":"2","w":"3","value":{"label":"(plus, times, minus, divided)","store":"operation","normalizer":"elementarMathOperation"}},{"v":"4","w":"3","value":{"label":"(plus, times, minus, divided)","store":"operation","normalizer":"elementarMathOperation"}},{"v":"3","w":"4","value":{"label":"([expressions])","store":"right"}}],"value":{"id":"elementar_math_op","label":"Elementar Math Operation","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","disableStopWords":"true","priority":"2","title":"Writes a elementar math operation","desc":"Writes a elementar math operation (*, -, +, /)","impl":"\"use strict\";\r\nasync function WriteElementarMathOperation(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"WriteElementarMathOperation\"');\r\n    let { left, operation, right } = command;\r\n    if (!Array.isArray(operation))\r\n        operation = operation.split(' ');\r\n    if (!Array.isArray(right))\r\n        right = right.split(' ');\r\n    let text = left;\r\n    for (let i = 0; i < right.length; i++) {\r\n        text += ' ' + operation[i] + ' ' + right[i];\r\n    }\r\n    if (command.parent)\r\n        return text;\r\n    return await editor.write(text);\r\n}\r\n// @ts-ignore\r\nreturn WriteElementarMathOperation;\r\n","phrases":["expression [expressions] times [expressions]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"([number], [string], [variable_reference], [elementar_math_op])","store":"expression"}},{"v":"0","w":"2","value":{"label":"(anything)","store":"wildCard","normalizer":"identity"}}],"value":{"id":"expressions","label":"Writes a expression","lang":"en-US","langName":"English","pad":"0.2","nodesep":"1","ranksep":"2","rankdir":"LR","alias":"true","title":"Writes a expression","desc":"Writes a expression in the editor, this is meant to be used inside another automatas","impl":"\"use strict\";\r\nasync function Expression(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"Expression\"');\r\n    const { expression, parent, wildCard } = command;\r\n    if (parent) {\r\n        return expression ? expression : { value: wildCard, isWildCard: true };\r\n    }\r\n    return await editor.write(expression || wildCard);\r\n}\r\n// @ts-ignore\r\nreturn Expression;\r\n","phrases":["[number]","anything"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(go)"}},{"v":"1","w":"2","value":{"label":"(to)"}},{"v":"0","w":"3","value":{"label":"(line)"}},{"v":"1","w":"3","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"(line)"}},{"v":"3","w":"5","value":{"label":"(number)"}},{"v":"3","w":"4","value":{"label":"({number})","store":"line"}},{"v":"5","w":"4","value":{"label":"({number})","store":"line"}}],"value":{"id":"go_to_line","label":"Change line","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Change line","desc":"Moves the cursor to a different line","impl":"\"use strict\";\r\nasync function goToLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"goToLine.\"');\r\n    return await editor.goToLine(command.line);\r\n}\r\n// @ts-ignore\r\nreturn goToLine;\r\n","phrases":["go to line 1","go to line number 42","go line 1","go line number 42","line 1","line number 1"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"3","value":{"label":"(*)"}},{"v":"3","w":"3","value":{"label":"({any})","store":"words"}},{"v":"3","w":"4","value":{"label":"(*)"}}],"value":{"id":"multi_word_token","label":"Group multiple words together","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","disableStopWords":"true","title":"Group multiple words together","desc":"Group multiple words together in one variable meant to be used as alias in other commands","impl":"\"use strict\";\r\nasync function MultiWordTokens(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"MultiWordTokens\"');\r\n    function camelCase(words) {\r\n        return words.map((a, i) => i ? a.charAt(0).toUpperCase() + a.slice(1) : a).join('');\r\n    }\r\n    if (((_a = command.extra) === null || _a === void 0 ? void 0 : _a.case) === 'camel') {\r\n        return camelCase(command.words.split(' '));\r\n    }\r\n    return command.words.split(' ');\r\n}\r\n// @ts-ignore\r\nreturn MultiWordTokens;\r\n","phrases":["* *"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg11"},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"},"parent":"sg13"},{"v":"5","value":{"shape":"circle"},"parent":"sg11"},{"v":"sg11","value":{"shape":"circle"}},{"v":"sg13","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(new)"}},{"v":"5","w":"1","value":{"label":"(new)"}},{"v":"1","w":"2","value":{"label":"(line)"}},{"v":"5","w":"2","value":{"label":"(line)"}},{"v":"2","w":"3","value":{"label":"(above, below)","store":"position"}},{"v":"4","w":"3","value":{"label":"(above, below)","store":"position"}},{"v":"0","w":"4","value":{"label":"(line)"}},{"v":"0","w":"5","value":{"label":"(create)"}},{"v":"5","w":"5","value":{"label":"(a)"}}],"value":{"id":"new_line","label":"New line","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"New line","desc":"Creates a new line above or below the current line","impl":"\"use strict\";\r\nasync function newLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"new line.\"');\r\n    return await editor.newLine(command.position);\r\n}\r\n// @ts-ignore\r\nreturn newLine;\r\n","phrases":["new line","create new line","create line","new line above","line above","create new line above","create line above"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"2","value":{"label":"(number)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"number"}}],"value":{"id":"number","label":"Writes a number","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","priority":"2","title":"Writes a number","desc":"Writes a number in the editor","impl":"\"use strict\";\r\nasync function WriteNumber(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"WriteNumber\"');\r\n    const { number, parent } = command;\r\n    if (parent)\r\n        return number;\r\n    return await editor.write(number);\r\n}\r\n// @ts-ignore\r\nreturn WriteNumber;\r\n","phrases":["number 1"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"circle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"},"parent":"sg18"},{"v":"13","value":{"shape":"circle"}},{"v":"14","value":{"shape":"circle"}},{"v":"15","value":{"shape":"circle"}},{"v":"16","value":{"shape":"circle"}},{"v":"17","value":{"shape":"doublecircle"}},{"v":"sg18","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(select)"}},{"v":"1","w":"2","value":{"label":"(letter, symbol)"}},{"v":"2","w":"3","value":{"label":"({char})","store":"word"}},{"v":"1","w":"4","value":{"label":"(word)"}},{"v":"4","w":"3","value":{"label":"({term})","store":"word"}},{"v":"1","w":"5","value":{"label":"(from)"}},{"v":"5","w":"13","value":{"label":"(line)","store":"selectLine"}},{"v":"13","w":"14","value":{"label":"({number})","store":"from"}},{"v":"14","w":"15","value":{"label":"(to)"}},{"v":"15","w":"16","value":{"label":"(line, λ)"}},{"v":"16","w":"17","value":{"label":"({number})","store":"to"}},{"v":"5","w":"11","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"fromPosition"}},{"v":"5","w":"6","value":{"label":"(letter, symbol)"}},{"v":"11","w":"6","value":{"label":"(letter, symbol)"}},{"v":"6","w":"7","value":{"label":"({char})","store":"from"}},{"v":"7","w":"8","value":{"label":"(to)"}},{"v":"8","w":"9","value":{"label":"(letter, symbol, λ)"}},{"v":"12","w":"9","value":{"label":"(letter, symbol, λ)"}},{"v":"8","w":"12","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"toPosition"}},{"v":"9","w":"10","value":{"label":"({char})","store":"to"}}],"value":{"id":"select","label":"Select","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Select","desc":"Select a piece of the text in the current line","impl":"\"use strict\";\r\nasync function Select(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"select\"');\r\n    if (command.selectLine != undefined) {\r\n        return await editor.select(parseInt(command.from, 10), parseInt(command.to, 10), true);\r\n    }\r\n    else if (command.word != undefined) {\r\n        const pos = await editor.findPositionOf(command.word);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n        throw new Error('Nothing found for string: ' + command.word);\r\n    }\r\n    const from = command.from || '';\r\n    const to = command.to || '';\r\n    let fromPos = parseInt(command.fromPosition, 10) || 1;\r\n    let toPos = parseInt(command.toPosition, 10) || 1;\r\n    if (from === '' || to === '') {\r\n        throw new Error('Invalid arguments!');\r\n    }\r\n    const matchFrom = await editor.findPositionOf(from);\r\n    const matchTo = await editor.findPositionOf(to);\r\n    if (toPos === -1)\r\n        toPos = matchTo.length;\r\n    else if (fromPos === -1)\r\n        fromPos = matchFrom.length;\r\n    return await editor.select(matchFrom[fromPos - 1][0], matchTo[toPos - 1][0], false);\r\n}\r\n// @ts-ignore\r\nreturn Select;\r\n","phrases":["select letter g","select word text","select from letter K to g","select from symbol M to last M","select from last symbol K to letter g","select from 42ª letter g to 42ª letter g","select from line 42 to line 42"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"2","value":{"label":"(string, text)"}},{"v":"2","w":"2","value":{"label":"({any})","store":"string"}},{"v":"2","w":"4","value":{"label":"(string, text)"}}],"value":{"id":"string","label":"Writes a string","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","disableStopWords":"true","priority":"2","title":"Writes a string","desc":"Writes a string in the editor","impl":"\"use strict\";\r\nasync function WriteString(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"WriteString\"');\r\n    const text = '\"' + command.string + '\"';\r\n    if (command.parent)\r\n        return text;\r\n    return await editor.write(text);\r\n}\r\n// @ts-ignore\r\nreturn WriteString;\r\n","phrases":["string text"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(new, declare, create)","store":"isNew","normalizer":"boolean"}},{"v":"0","w":"2","value":{"label":"(variable, constant)","store":"memType"}},{"v":"1","w":"2","value":{"label":"(variable, constant)","store":"memType"}},{"v":"2","w":"3","value":{"label":"(called, named)"}},{"v":"3","w":"4","value":{"label":"([multi_word_token])","store":"varName","extraArgs":"{\"case\": \"camel\"}"}},{"v":"2","w":"7","value":{"label":"({term})","store":"varName"}},{"v":"3","w":"7","value":{"label":"({term})","store":"varName"}},{"v":"4","w":"5","value":{"label":"(equals)"}},{"v":"7","w":"5","value":{"label":"(equals)"}},{"v":"5","w":"6","value":{"label":"([expressions])","store":"expression"}}],"value":{"id":"variable_assignment","label":"Stores a value in a variable","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"Stores a value in a variable","desc":"Stores a number, string etc in a variable","impl":"\"use strict\";\r\nasync function NewVariable(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"NewVariable\"');\r\n    let { isNew, varName, expression, memType } = command;\r\n    const value = typeof expression === 'string' ? expression : expression === null || expression === void 0 ? void 0 : expression.value;\r\n    const allocate = memType === 0 ? 'let ' : 'const ';\r\n    const text = `${isNew ? allocate : ''}${varName}${value ? ` = ${value}` : ''}`;\r\n    await editor.write(text);\r\n    if (typeof expression !== 'string') {\r\n        const pos = await editor.findPositionOf(expression.value);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n// @ts-ignore\r\nreturn NewVariable;\r\n","phrases":["create constant called [multi_word_token]","constant named [multi_word_token]","declare variable called [multi_word_token] equals [expressions]","declare variable named temp equals [expressions]","create constant graph equals [expressions]","constant named [multi_word_token] equals [expressions]","variable called a equals [expressions]","variable a equals [expressions]","new variable called value","declare constant temp","variable named temp","constant text"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(reference)"}},{"v":"0","w":"2","value":{"label":"(variable, constant)"}},{"v":"1","w":"2","value":{"label":"(variable, constant)"}},{"v":"2","w":"4","value":{"label":"(called)"}},{"v":"2","w":"3","value":{"label":"({term})","store":"varName"}},{"v":"4","w":"5","value":{"label":"([multi_word_token])","store":"varName"}}],"value":{"id":"variable_reference","label":"References a variable","lang":"en-US","langName":"English","pad":"0.2","rankdir":"LR","title":"References a variable","desc":"Writes a variable or constant in the editor","impl":"\"use strict\";\r\nasync function VariableReference(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"VariableReference\"');\r\n    let { varName, parent } = command;\r\n    if (Array.isArray(varName)) {\r\n        varName = varName.map((item, index) => {\r\n            return index ? item.charAt(0).toUpperCase() + item.slice(1) : item;\r\n        }).join('');\r\n    }\r\n    if (parent)\r\n        return varName;\r\n    return await editor.write(varName);\r\n}\r\n// @ts-ignore\r\nreturn VariableReference;\r\n","phrases":["reference constant temp","constant number","reference constant called [multi_word_token]","constant called [multi_word_token]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(print)"}},{"v":"0","w":"2","value":{"label":"(write)"}},{"v":"2","w":"1","value":{"label":"(down, λ)"}},{"v":"2","w":"3","value":{"label":"(it)"}},{"v":"3","w":"1","value":{"label":"(down, λ)"}},{"v":"1","w":"1","value":{"label":"({any})","store":"text"}}],"value":{"id":"write","label":"Write text","lang":"en-US","langName":"English","pad":"0.2","disableStopWords":"true","rankdir":"LR","title":"Write text","desc":"Write some text in the editor","impl":"\"use strict\";\r\nasync function write(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"write.\"');\r\n    return await editor.write(command.text);\r\n}\r\n// @ts-ignore\r\nreturn write;\r\n","phrases":["print the universe is cracked","write the universe is cracked","write it down the universe is cracked"]}}],"pt-BR":[{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"circle"},"parent":"sg3"},{"v":"8","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"doublecircle"}},{"v":"13","value":{"shape":"circle"}},{"v":"sg3","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(cursor, ponteiro)"}},{"v":"1","w":"2","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"line"}},{"v":"1","w":"5","value":{"label":"(símbolo, letra)"}},{"v":"7","w":"5","value":{"label":"(símbolo, letra)"}},{"v":"1","w":"7","value":{"label":"({ordinalNumber})","store":"leapSize","normalizer":"ordinalNumber"}},{"v":"5","w":"6","value":{"label":"({char})","store":"symbol"}},{"v":"1","w":"8","value":{"label":"(começo, final)","store":"linePosition"}},{"v":"8","w":"10","value":{"label":"(linha)"}},{"v":"1","w":"11","value":{"label":"(próximo)"}},{"v":"11","w":"13","value":{"label":"({number})","store":"leapSize"}},{"v":"11","w":"12","value":{"label":"(símbolo, letra)"}},{"v":"13","w":"12","value":{"label":"(símbolo, letra)"}}],"value":{"id":"cursor","label":"Mover o cursor","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Mover o cursor","desc":"Move o cursor para uma linha ou símbolo","impl":"\"use strict\";\r\nasync function cursor(args, editor, context) {\r\n    console.log('[Spoken]: Executing: \"cursor.\"');\r\n    if (args.linePosition != null) {\r\n        const pos = args.linePosition === LinePostionEnum.BEGIN ? 'BEGIN_LINE' : 'END_LINE';\r\n        return await editor.moveCursorTo(pos);\r\n    }\r\n    else if (args.line) {\r\n        return await editor.goToLine(args.line);\r\n    }\r\n    else if (!args.symbol) {\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo(null, undefined, nth);\r\n    }\r\n    else {\r\n        if (args.leapSize == undefined)\r\n            args.leapSize = '1';\r\n        const nth = parseInt(args.leapSize || '1', 10);\r\n        return await editor.moveCursorTo('SYMBOL', args.symbol, nth);\r\n    }\r\n    return await editor.moveCursorTo('BEGIN_LINE');\r\n}\r\nvar LinePostionEnum;\r\n(function (LinePostionEnum) {\r\n    LinePostionEnum[LinePostionEnum[\"BEGIN\"] = 0] = \"BEGIN\";\r\n    LinePostionEnum[LinePostionEnum[\"END\"] = 1] = \"END\";\r\n})(LinePostionEnum || (LinePostionEnum = {}));\r\n// @ts-ignore\r\nreturn cursor;\r\n","phrases":["cursor linha 42","cursor letra z","ponteiro último símbolo z","cursor final linha","ponteiro próximo símbolo","cursor próximo 1 letra"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(expressão)"}},{"v":"1","w":"2","value":{"label":"([expressions])","store":"left"}},{"v":"2","w":"3","value":{"label":"(mais, vezes, menos, dividido)","store":"operation","normalizer":"elementarMathOperation"}},{"v":"4","w":"3","value":{"label":"(mais, vezes, menos, dividido)","store":"operation","normalizer":"elementarMathOperation"}},{"v":"3","w":"4","value":{"label":"([expressions])","store":"right"}}],"value":{"id":"elementar_math_op","label":"Operação Matemática Elementar","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","disableStopWords":"true","priority":"2","title":"Escreve uma operação matemática elementar","desc":"Escreve uma operação matemática elementar (*, -, +, /)","impl":"\"use strict\";\r\nasync function WriteElementarMathOperation(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"WriteElementarMathOperation\"');\r\n    let { left, operation, right } = command;\r\n    if (!Array.isArray(operation))\r\n        operation = operation.split(' ');\r\n    if (!Array.isArray(right))\r\n        right = right.split(' ');\r\n    let text = left;\r\n    for (let i = 0; i < right.length; i++) {\r\n        text += ' ' + operation[i] + ' ' + right[i];\r\n    }\r\n    if (command.parent)\r\n        return text;\r\n    return await editor.write(text);\r\n}\r\n// @ts-ignore\r\nreturn WriteElementarMathOperation;\r\n","phrases":["expressão [expressions] dividido [expressions]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}},{"v":"2","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"([number], [string], [variable_reference], [elementar_math_op])","store":"expression"}},{"v":"0","w":"2","value":{"label":"(tudo)","store":"wildCard","normalizer":"identity"}}],"value":{"id":"expressions","label":"Escreve uma expressão","lang":"pt-BR","langName":"Português","pad":"0.2","nodesep":"1","ranksep":"2","rankdir":"LR","alias":"true","title":"Escreve uma expressão","desc":"Escreve uma expressão no editor de texto, esse automata foi projetado para ser usado em outros automatas","impl":"\"use strict\";\r\nasync function Expression(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"Expression\"');\r\n    const { expression, parent, wildCard } = command;\r\n    if (parent) {\r\n        return expression ? expression : { value: wildCard, isWildCard: true };\r\n    }\r\n    return await editor.write(expression || wildCard);\r\n}\r\n// @ts-ignore\r\nreturn Expression;\r\n","phrases":["[number]","tudo"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(vá, vai)"}},{"v":"1","w":"2","value":{"label":"(para)"}},{"v":"2","w":"5","value":{"label":"(a)"}},{"v":"0","w":"3","value":{"label":"(linha)"}},{"v":"1","w":"3","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"(linha)"}},{"v":"5","w":"3","value":{"label":"(linha)"}},{"v":"3","w":"6","value":{"label":"(número)"}},{"v":"3","w":"4","value":{"label":"({number})","store":"line"}},{"v":"6","w":"4","value":{"label":"({number})","store":"line"}}],"value":{"id":"go_to_line","label":"Trocar linha","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Trocar linha","desc":"Move or cursor para uma linha diferente","impl":"\"use strict\";\r\nasync function goToLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"goToLine.\"');\r\n    return await editor.goToLine(command.line);\r\n}\r\n// @ts-ignore\r\nreturn goToLine;\r\n","phrases":["vai para linha 42","vai para linha número 42","vai para a linha 1","vai para a linha número 42","vai linha 42","vai linha número 1","linha 1","linha número 1"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"3","value":{"label":"(*)"}},{"v":"3","w":"3","value":{"label":"({any})","store":"words"}},{"v":"3","w":"4","value":{"label":"(*)"}}],"value":{"id":"multi_word_token","label":"Agrupa múltiplas palavras","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","disableStopWords":"true","title":"Agrupa múltiplas palavras","desc":"Agrupa múltiplas palavras juntas, projetado para ser usado dentro de outros automatas","impl":"\"use strict\";\r\nasync function MultiWordTokens(command, editor, context) {\r\n    var _a;\r\n    console.log('[Spoken]: Executing: \"MultiWordTokens\"');\r\n    function camelCase(words) {\r\n        return words.map((a, i) => i ? a.charAt(0).toUpperCase() + a.slice(1) : a).join('');\r\n    }\r\n    if (((_a = command.extra) === null || _a === void 0 ? void 0 : _a.case) === 'camel') {\r\n        return camelCase(command.words.split(' '));\r\n    }\r\n    return command.words.split(' ');\r\n}\r\n// @ts-ignore\r\nreturn MultiWordTokens;\r\n","phrases":["* *"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"},"parent":"sg14"},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"doublecircle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"},"parent":"sg16"},{"v":"5","value":{"shape":"circle"},"parent":"sg14"},{"v":"sg14","value":{"shape":"circle"}},{"v":"sg16","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(nova)"}},{"v":"5","w":"1","value":{"label":"(nova)"}},{"v":"1","w":"2","value":{"label":"(linha)"}},{"v":"5","w":"2","value":{"label":"(linha)"}},{"v":"2","w":"3","value":{"label":"(acima, abaixo)","store":"position"}},{"v":"4","w":"3","value":{"label":"(acima, abaixo)","store":"position"}},{"v":"0","w":"4","value":{"label":"(linha)"}},{"v":"0","w":"5","value":{"label":"(crie)"}},{"v":"5","w":"5","value":{"label":"(uma)"}},{"v":"4","w":"2","value":{"label":"(nova)"}}],"value":{"id":"new_line","label":"Linha nova","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Linha nova","desc":"Cria uma linha nova abaixo ou acima da linha atual","impl":"\"use strict\";\r\nasync function newLine(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"new line.\"');\r\n    return await editor.newLine(command.position);\r\n}\r\n// @ts-ignore\r\nreturn newLine;\r\n","phrases":["nova linha","linha nova","crie nova linha","crie linha","nova linha acima","linha nova abaixo","linha abaixo","crie nova linha acima","crie linha acima"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"2","value":{"label":"(número)"}},{"v":"2","w":"3","value":{"label":"({number})","store":"number"}}],"value":{"id":"number","label":"Escreve um número","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","priority":"2","title":"Escreve um número","desc":"Escreve um número no editor","impl":"\"use strict\";\r\nasync function WriteNumber(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"WriteNumber\"');\r\n    const { number, parent } = command;\r\n    if (parent)\r\n        return number;\r\n    return await editor.write(number);\r\n}\r\n// @ts-ignore\r\nreturn WriteNumber;\r\n","phrases":["número 1"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"circle"}},{"v":"7","value":{"shape":"circle"}},{"v":"8","value":{"shape":"circle"}},{"v":"9","value":{"shape":"circle"}},{"v":"10","value":{"shape":"doublecircle"}},{"v":"11","value":{"shape":"circle"}},{"v":"12","value":{"shape":"circle"},"parent":"sg20"},{"v":"13","value":{"shape":"circle"}},{"v":"14","value":{"shape":"circle"}},{"v":"15","value":{"shape":"circle"}},{"v":"16","value":{"shape":"circle"}},{"v":"17","value":{"shape":"doublecircle"}},{"v":"sg20","value":{"shape":"circle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(selecione, selecionar)"}},{"v":"1","w":"2","value":{"label":"(letra, símbolo)"}},{"v":"2","w":"3","value":{"label":"({char})","store":"word"}},{"v":"1","w":"4","value":{"label":"(palavra)"}},{"v":"4","w":"3","value":{"label":"({term})","store":"word"}},{"v":"1","w":"5","value":{"label":"(de, da)"}},{"v":"5","w":"13","value":{"label":"(linha)","store":"selectLine"}},{"v":"13","w":"14","value":{"label":"({number})","store":"from"}},{"v":"14","w":"15","value":{"label":"(até)"}},{"v":"15","w":"16","value":{"label":"(linha, λ)"}},{"v":"16","w":"17","value":{"label":"({number})","store":"to"}},{"v":"5","w":"11","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"fromPosition"}},{"v":"5","w":"6","value":{"label":"(letra, símbolo)"}},{"v":"11","w":"6","value":{"label":"(letra, símbolo)"}},{"v":"6","w":"7","value":{"label":"({char})","store":"from"}},{"v":"7","w":"8","value":{"label":"(até)"}},{"v":"8","w":"9","value":{"label":"(letra, símbolo, λ)"}},{"v":"12","w":"9","value":{"label":"(letra, símbolo, λ)"}},{"v":"8","w":"12","value":{"label":"({ordinalNumber})","normalizer":"ordinalNumber","store":"toPosition"}},{"v":"9","w":"10","value":{"label":"({char})","store":"to"}}],"value":{"id":"select","label":"Selecionar","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Selecionar","desc":"Seleciona um pedaço de texto na linha atual","impl":"\"use strict\";\r\nasync function Select(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"select\"');\r\n    if (command.selectLine != undefined) {\r\n        return await editor.select(parseInt(command.from, 10), parseInt(command.to, 10), true);\r\n    }\r\n    else if (command.word != undefined) {\r\n        const pos = await editor.findPositionOf(command.word);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n        throw new Error('Nothing found for string: ' + command.word);\r\n    }\r\n    const from = command.from || '';\r\n    const to = command.to || '';\r\n    let fromPos = parseInt(command.fromPosition, 10) || 1;\r\n    let toPos = parseInt(command.toPosition, 10) || 1;\r\n    if (from === '' || to === '') {\r\n        throw new Error('Invalid arguments!');\r\n    }\r\n    const matchFrom = await editor.findPositionOf(from);\r\n    const matchTo = await editor.findPositionOf(to);\r\n    if (toPos === -1)\r\n        toPos = matchTo.length;\r\n    else if (fromPos === -1)\r\n        fromPos = matchFrom.length;\r\n    return await editor.select(matchFrom[fromPos - 1][0], matchTo[toPos - 1][0], false);\r\n}\r\n// @ts-ignore\r\nreturn Select;\r\n","phrases":["selecione letra A","selecione palavra valor","selecionar da letra A até símbolo B","selecione de letra A até sétimo símbolo A","selecione de 42ª letra B até símbolo z","selecionar da 42ª símbolo B até sétimo letra B","selecionar de linha 1 até linha 42"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"2","value":{"label":"(string, text)"}},{"v":"2","w":"2","value":{"label":"({any})","store":"string"}},{"v":"2","w":"4","value":{"label":"(string, text)"}}],"value":{"id":"string","label":"Escreve uma string","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","disableStopWords":"true","priority":"2","title":"Escreve uma string","desc":"Escreve uma string no editor","impl":"\"use strict\";\r\nasync function WriteString(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"WriteString\"');\r\n    const text = '\"' + command.string + '\"';\r\n    if (command.parent)\r\n        return text;\r\n    return await editor.write(text);\r\n}\r\n// @ts-ignore\r\nreturn WriteString;\r\n","phrases":["string string"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"circle"}},{"v":"4","value":{"shape":"doublecircle"}},{"v":"5","value":{"shape":"circle"}},{"v":"6","value":{"shape":"doublecircle"}},{"v":"7","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(nova, declare, crie)","store":"isNew","normalizer":"boolean"}},{"v":"0","w":"2","value":{"label":"(variável, constante)","store":"memType"}},{"v":"1","w":"2","value":{"label":"(variável, constante)","store":"memType"}},{"v":"2","w":"3","value":{"label":"(chamada)"}},{"v":"3","w":"4","value":{"label":"([multi_word_token])","store":"varName","extraArgs":"{\"case\": \"camel\"}"}},{"v":"2","w":"7","value":{"label":"({term})","store":"varName"}},{"v":"3","w":"7","value":{"label":"({term})","store":"varName"}},{"v":"4","w":"5","value":{"label":"(igual)"}},{"v":"7","w":"5","value":{"label":"(igual)"}},{"v":"5","w":"6","value":{"label":"([expressions])","store":"expression"}}],"value":{"id":"variable_assignment","label":"Guarda um valor em uma variável","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Guarda um valor em uma variável","desc":"Guarda um valor, inteiro, texto e etc em uma variável","impl":"\"use strict\";\r\nasync function NewVariable(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"NewVariable\"');\r\n    let { isNew, varName, expression, memType } = command;\r\n    const value = typeof expression === 'string' ? expression : expression === null || expression === void 0 ? void 0 : expression.value;\r\n    const allocate = memType === 0 ? 'let ' : 'const ';\r\n    const text = `${isNew ? allocate : ''}${varName}${value ? ` = ${value}` : ''}`;\r\n    await editor.write(text);\r\n    if (typeof expression !== 'string') {\r\n        const pos = await editor.findPositionOf(expression.value);\r\n        if (pos.length) {\r\n            return await editor.select(pos[0][0], pos[0][1] - 1, false);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n// @ts-ignore\r\nreturn NewVariable;\r\n","phrases":["declare constante chamada [multi_word_token]","constante chamada [multi_word_token]","crie variável chamada [multi_word_token] igual [expressions]","crie constante chamada temp igual [expressions]","crie variável valor igual [expressions]","variável chamada [multi_word_token] igual [expressions]","variável chamada valor igual [expressions]","variável texto igual [expressions]","declare variável chamada lista","nova constante texto","constante chamada texto","constante temp"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"circle"}},{"v":"2","value":{"shape":"circle"}},{"v":"3","value":{"shape":"doublecircle"}},{"v":"4","value":{"shape":"circle"}},{"v":"5","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(referência, refira)"}},{"v":"0","w":"2","value":{"label":"(variável, constante)"}},{"v":"1","w":"2","value":{"label":"(variável, constante)"}},{"v":"2","w":"4","value":{"label":"(chamada)"}},{"v":"2","w":"3","value":{"label":"({term})","store":"varName"}},{"v":"4","w":"5","value":{"label":"([multi_word_token])","store":"varName"}}],"value":{"id":"variable_reference","label":"Referencia a uma variável","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","title":"Referencia a uma variável","desc":"Refere a uma variável ou constante já declarada","impl":"\"use strict\";\r\nasync function VariableReference(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"VariableReference\"');\r\n    let { varName, parent } = command;\r\n    if (Array.isArray(varName)) {\r\n        varName = varName.map((item, index) => {\r\n            return index ? item.charAt(0).toUpperCase() + item.slice(1) : item;\r\n        }).join('');\r\n    }\r\n    if (parent)\r\n        return varName;\r\n    return await editor.write(varName);\r\n}\r\n// @ts-ignore\r\nreturn VariableReference;\r\n","phrases":["referência variável a","constante a","refira constante chamada [multi_word_token]","constante chamada [multi_word_token]"]}},{"options":{"directed":true,"multigraph":true,"compound":true},"nodes":[{"v":"0","value":{"shape":"circle"}},{"v":"1","value":{"shape":"doublecircle"}}],"edges":[{"v":"0","w":"1","value":{"label":"(escreva)"}},{"v":"1","w":"1","value":{"label":"({any})","store":"text"}}],"value":{"id":"write","label":"Escrever texto","lang":"pt-BR","langName":"Português","pad":"0.2","rankdir":"LR","disableStopWords":"true","title":"Escrever texto","desc":"Escreve um pedaço de texto no editor de texto","impl":"\"use strict\";\r\nasync function write(command, editor, context) {\r\n    console.log('[Spoken]: Executing: \"write.\"');\r\n    return await editor.write(command.text);\r\n}\r\n// @ts-ignore\r\nreturn write;\r\n","phrases":["escreva isto é um teste"]}}]},"desc":"Collection of voice commands of the typescript language","label":"Typescript voice commands"}]}