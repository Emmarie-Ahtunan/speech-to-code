{"version":3,"sources":["pages/home/index.tsx","pages/@components/header/index.tsx"],"names":["React","memo","props","Fragment","className","width","height","src","title","frameBorder","allow","allowFullScreen","target","rel","href","Header","parseRoute","root","lang","route","makeUrl","path","process","isSelected","page","stt","localStorage","getItem","changeStt","val","evt","preventDefault","setItem","window","location","reload","id","alt","i18n","data-tip","data-for","onClick","multiline","effect"],"mappings":"+HAAA,mDAMeA,cAAMC,MAAK,SAAgBC,GACtC,OACI,eAAC,IAAMC,SAAP,WACI,cAAC,IAAD,IACA,sBAAMC,UAAU,OAAhB,SACI,sBAAKA,UAAU,UAAf,UACI,wBAAQC,MAAM,MAAMC,OAAO,MAAMC,IAAI,4CAA4CC,MAAM,uBAAuBC,YAAY,IAAIC,MAAM,2FAA2FC,iBAAe,IAC9O,6CAIA,wPAGwC,kDAHxC,qBAGqF,kFAHrF,OAKA,4FACgE,IAC5D,mBAAGC,OAAO,SAASC,IAAI,aAAaC,KApBzC,sGAoBK,oBAAiE,IAFrE,6EAKA,yIAIA,+CACkB,mBAAGD,IAAI,aAAaC,KAAK,UAAzB,kBADlB,qC,sDC/BpB,yEAMe,SAASC,EAAOb,GAAa,IAAD,EACTc,cAAtBC,EAD+B,EAC/BA,KAAMC,EADyB,EACzBA,KAAMC,EADmB,EACnBA,MACdC,EAAU,SAACC,GAAD,gBAAqBC,kBAArB,YAA+CL,GAA/C,OAAwDA,EAAY,IAAL,IAA/D,OAA2EI,IACrFE,EAAa,SAACC,GAAD,OAAkBL,IAAUK,EAAO,WAAa,IAC7DC,EAAMC,aAAaC,QAAQ,QAAU,QAErCC,EAAY,SAACC,EAAaC,GAK5B,OAJAA,EAAIC,iBAEJL,aAAaM,QAAQ,MAAOH,GAErBI,OAAOC,SAASC,UAG3B,OACI,sBAAKC,GAAG,UAAR,UACI,iCACI,qBACI7B,IAAG,UAAKe,kBAAL,oBACHe,IAAI,OACJ/B,OAAO,KACPE,MAAM,iBAGd,mBAAGM,KAAMM,EAAQ,IAAKhB,UAAWmB,EAAW,SAA5C,SACKe,EAAKpB,GAAL,OAEL,mBAAGJ,KAAMM,EAAQ,WAAYhB,UAAWmB,EAAW,UAAnD,kBAGA,mBACIV,IAAI,aACJC,KACI,iJAGJF,OAAO,SANX,SAQK0B,EAAKpB,GAAL,UAEL,mBAAGJ,KAAMM,EAAQ,UAAWhB,UAAWmB,EAAW,SAAlD,SACKe,EAAKpB,GAAL,QAEL,sBAAKd,UAAU,WAAf,UACI,mBAAGU,KAAMQ,6BAAwClB,UAAoB,UAATc,EAAA,WAAgC,GAA5F,mBADJ,YAEI,mBAAGJ,KAAMQ,6BAAwClB,UAAoB,UAATc,EAAA,WAAgC,GAA5F,mBACA,sBAAMd,UAAU,OAAOmC,WAAS,wBAAwBC,WAAS,SAAjE,SACI,mBAAGpC,UAAU,+BAGrB,sBAAKA,UAAU,SAAf,UACI,mBACIU,KAAK,IACLV,UAAmB,UAARqB,EAAA,WAA+B,GAC1CgB,QAAS,SAACX,GAAD,OAASF,EAAU,QAASE,IAHzC,mBADJ,YASI,mBACIhB,KAAK,IACLV,UAAmB,WAARqB,EAAA,WAAgC,GAC3CgB,QAAS,SAACX,GAAD,OAASF,EAAU,SAAUE,IAH1C,oBAOA,sBAAM1B,UAAU,OAAOmC,WAAUD,EAAKpB,GAAL,KAAoBsB,WAAS,SAA9D,SACI,mBAAGpC,UAAU,+BAGrB,cAAC,IAAD,CAAcsC,WAAS,EAACC,OAAO,QAAQvC,UAAU,gCAAgCgC,GAAG,cAKhG,IAAME,EAA4B,CAC9B,QAAS,CACL,KAAO,oZAIP,KAAQ,OACR,MAAS,QACT,QAAW,WAEf,QAAS,CACL,KAAO,0bAIP,KAAQ,YACR,MAAS,QACT,QAAW,Y","file":"static/js/9.5ff90a56.chunk.js","sourcesContent":["import React from 'react'\r\nimport Nav from '../@components/header'\r\nimport './style.scss'\r\n\r\nconst url_spoken = 'https://github.com/pedrooaugusto/speech-to-code/tree/main/spoken-vscode-driver#vscode-spoken-driver'\r\n\r\nexport default React.memo(function Webapp(props: { lang: string }) {\r\n    return (\r\n        <React.Fragment>\r\n            <Nav />\r\n            <main className=\"home\">\r\n                <div className=\"content\">\r\n                    <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/X61A9e8TuKc\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                    <h1>Speech2Code</h1>\r\n                    {/*<p>\r\n                        Speech2Code is a web application that converts speech to code (<u><i><small>copilot suggested that</small></i></u>).\r\n                    </p>*/}\r\n                    <p>\r\n                        Speech2Code is an application developed to help programmers suffering from RSI continue\r\n                        to exercise their main activity by using voice commands instead of the hands to type code.\r\n                        The ideia is that instead of typing <code>let value = 7;</code> you can just say <span>“new variable value equals number 7”</span>.\r\n                    </p>\r\n                    <p>\r\n                        Speech2Code also comes with an extension for VSCode called {' '}\r\n                        <a target='_blank' rel='noreferrer' href={url_spoken}>Spoken</a>{' '}, \r\n                        is through that extension that it can communicate and control VSCode.\r\n                    </p>\r\n                    <p>\r\n                        Currently, it only has support for the JavaScript programming language\r\n                        in the Visual Studio Code Editor.\r\n                    </p>\r\n                    <p>\r\n                        Check out the <a rel='noreferrer' href='/webapp'>demo</a> to see it working.\r\n                    </p>\r\n                </div>\r\n            </main>\r\n        </React.Fragment>\r\n    )\r\n})\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\nimport ReactTooltip from 'react-tooltip'\r\nimport { parseRoute } from '../utils'\r\nimport './style.scss'\r\n\r\nexport default function Header(props: any) {\r\n    const { root, lang, route } = parseRoute()\r\n    const makeUrl = (path: string) => `${process.env.PUBLIC_URL}/${root}${ !root ? '' : '/' }${path}`\r\n    const isSelected = (page: string) => route === page ? 'selected' : '' \r\n    const stt = localStorage.getItem('STT') || 'azure'\r\n\r\n    const changeStt = (val: string, evt: React.MouseEvent) => {\r\n        evt.preventDefault()\r\n\r\n        localStorage.setItem('STT', val)\r\n\r\n        return window.location.reload()\r\n    }\r\n\r\n    return (\r\n        <nav id=\"top-nav\">\r\n            <figure>\r\n                <img\r\n                    src={`${process.env.PUBLIC_URL}/logo-purple.png`}\r\n                    alt=\"logo\"\r\n                    height=\"40\"\r\n                    title=\"Brand logo\"\r\n                />\r\n            </figure>\r\n            <a href={makeUrl('')} className={isSelected('index')}>\r\n                {i18n[lang]['Home']}\r\n            </a>\r\n            <a href={makeUrl('webapp/')} className={isSelected('webapp')}>\r\n                Demo\r\n            </a>\r\n            <a\r\n                rel=\"noreferrer\"\r\n                href={\r\n                    \"https://pedrooaugusto.github.io/Programming With Voice - Assistive Technology Tool \" +\r\n                    \"For Programming In JavaScript Using Voice - Pedro Silva.pdf\"\r\n                }\r\n                target=\"_blank\"\r\n            >\r\n                {i18n[lang]['Article']}\r\n            </a>\r\n            <a href={makeUrl('about/')} className={isSelected('about')}>\r\n                {i18n[lang]['About']}    \r\n            </a>\r\n            <div className=\"language\">\r\n                <a href={process.env.PUBLIC_URL + \"/en/webapp/\"} className={lang === 'en-US' ? `selected` : ''}>en-US</a>&nbsp;/&nbsp;\r\n                <a href={process.env.PUBLIC_URL + \"/pt/webapp/\"} className={lang === 'pt-BR' ? `selected` : ''}>pt-BR</a>\r\n                <span className=\"help\" data-tip=\"This website language\" data-for=\"header\">\r\n                    <i className=\"fa fa-question-circle\" />\r\n                </span>\r\n            </div>\r\n            <div className=\"config\">\r\n                <a\r\n                    href=\"#\"\r\n                    className={stt === 'azure' ? `selected` : ''}\r\n                    onClick={(evt) => changeStt('azure', evt)}\r\n                >\r\n                    Azure\r\n                </a>\r\n                &nbsp;/&nbsp;\r\n                <a\r\n                    href=\"#\"\r\n                    className={stt === 'chrome' ? `selected` : ''}\r\n                    onClick={(evt) => changeStt('chrome', evt)}\r\n                >\r\n                    Chrome\r\n                </a>\r\n                <span className=\"help\" data-tip={i18n[lang]['help']} data-for=\"header\">\r\n                    <i className=\"fa fa-question-circle\" />\r\n                </span>\r\n            </div>\r\n            <ReactTooltip multiline effect=\"solid\" className=\"custom-tooltip tooltip-header\" id=\"header\" />\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst i18n: Record<string, any> = {\r\n    'en-US': {\r\n        'help': `Which Speech to Text provider should be used ?<br/>\r\n                Azure is the default option, but since it is a paid service it may not be available all the time.<br/>\r\n                Chrome is the native Speech to Text provider of your browser, it's a free service and was\r\n                tested on Google Chrome and MS Edge (it may work on any browser that supports the SpeechRecognition API).`,\r\n        'Home': 'Home',\r\n        'About': 'About',\r\n        'Article': 'Article'\r\n    },\r\n    'pt-BR': {\r\n        'help': `Qual o provedor de Speech to Text deve ser usado ?<br/>\r\n        Azure é a opção padrão, por se tratar de um serviço pago, pode não estar disponível a todo momento.<br/>\r\n        Chrome é o serviço nativo de conversão de fala em texto do seu navegador, é um serviço grátis e funciona\r\n            no Google Chrome e no MS Edge (pode funcionar em qualquer browser que suporte a SpeechRecognition API).`,\r\n        'Home': 'Início',\r\n        'About': 'Sobre',\r\n        'Article': 'Artigo'\r\n    }\r\n}\r\n"],"sourceRoot":""}