{"version":3,"sources":["pages/@components/header/index.tsx","pages/webapp/tutorial/problems.ts","pages/webapp/services/global-context.tsx","pages/webapp/editor/index.tsx","pages/webapp/services/ipc-service-emulator.tsx","services/chrome/voice-recognizer.ts","services/chrome/use-voice-recognition.ts","pages/webapp/speech2code/index.tsx","pages/webapp/tutorial/index.tsx","pages/webapp/index.tsx","pages/webapp/services/spoken-interface.ts","pages/webapp/services/editor.ts"],"names":["Header","props","parseRoute","root","lang","route","makeUrl","path","process","stt","localStorage","getItem","changeStt","val","evt","preventDefault","setItem","window","location","reload","id","src","alt","height","title","href","className","rel","ARTICLE_LINK","target","onClick","data-tip","i18n","data-for","multiline","effect","problems","placeholder","statement","solution","code","GlobalContext","React","createContext","GloablContext","useState","language","problemIndex","state","setState","changeLanguage","useCallback","s","changeProblem","isMobile","matchMedia","matches","value","useMemo","problem","index","Provider","children","myCodeMirror","memo","result","setResult","loading","setLoading","useContext","useEffect","CodeMirror","document","querySelector","lineNumbers","mode","styleActiveLine","matchBrackets","theme","indentUnit","EditorService","setEditor","onRunCode","before","success","error","ex","toString","after","setValue","runCode","IPCService","handles","Map","this","onMain","SpokenInterface","onComand","event","editor","send","name","status","current","channel","args","has","cb","get","setTimeout","reply","bind","delete","set","ipcRenderer","MyRecognizer","recognizing","recognizer","handlers","a","webkitSpeechRecognition","speechRecognitionList","webkitSpeechGrammarList","addFromString","grammars","continuous","interimResults","maxAlternatives","onresult","fn","results","onspeechend","stop","onnomatch","console","log","onerror","start","info","abort","clear","instance","findComand","voiceToTextResponse","text","sanitizePonctuation","Spoken","recognizePhrase","toLocaleLowerCase","extra","_rawVoiceToTextResponse","phrase","replace","useChromeVoiceRecognition","setResults","executeInternalCommand","getRecognizer","IpcRenderer","on","removeAllListeners","isFinal","length","transcript","trim","attempt","Date","now","recognized","match","startsWith","err","init","destroy","analyzeSentence","timeout","App","AppFactory","undefined","useVoiceRecognition","axis","handle","cancel","defaultPosition","x","y","AppMobile","setMode","Fragment","openModal","closeModal","Speech2Code","style","hash","initialLang","onOpen","Tutorial","dangerouslySetInnerHTML","__html","map","item","fmt","Problems","str","command","execute","JSON","stringify","parent","eval","impl","parseArgs","context","Object","keys","key","innerCommand","Array","isArray","arr","push","ab","CodeMirrorEditor","runCodeLifecycle","Error","lifecycle","getEditor","getValue","runThisCode","then","catch","finally","Log","e","getSelection","sel","listSelections","replaceSelection","setSelection","anchor","head","ch","replaceRange","getCursor","selection","execCommand","pos","goToLine","String","line","number","cursorPosition","destLine","parseInt","getLine","setCursor","Math","max","trimLeft","scrollIntoView","withWhiteSpace","rStart","rEnd","trimRight","relative","regex","indices","exec","lineNumber","pad","substr","stringMatchAll","to","symbol","leapSize","cursor","lineBoundaries","findAllOccurrences","RegExp","range","term","from","lastCharacter","currentLine","_line","_text","character","p1","p2","lines","lastLine","sp1","sp2","min","lineCount","fileName","Promise","res","rej","logs","join","defaultLog"],"mappings":"yLAMe,SAASA,EAAOC,GAAa,IAAD,EACTC,cAAtBC,EAD+B,EAC/BA,KAAMC,EADyB,EACzBA,KAAMC,EADmB,EACnBA,MACdC,EAAU,SAACC,GAAD,gBAAqBC,kBAArB,YAA+CL,GAA/C,OAAwDA,EAAY,IAAL,IAA/D,OAA2EI,IACrFE,EAAMC,aAAaC,QAAQ,QAAU,QAErCC,EAAY,SAACC,EAAaC,GAK5B,OAJAA,EAAIC,iBAEJL,aAAaM,QAAQ,MAAOH,GAErBI,OAAOC,SAASC,UAG3B,OACI,sBAAKC,GAAG,UAAR,UACI,iCACI,qBAAKC,IAAG,UAAKb,kBAAL,oBAA+Cc,IAAI,OAAOC,OAAO,KAAKC,MAAM,iBAExF,mBAAGC,KAAMnB,EAAQ,IAAKoB,UAAqB,UAAVrB,EAAoB,WAAa,GAAlE,kBACA,mBAAGoB,KAAMnB,EAAQ,WAAYoB,UAAqB,WAAVrB,EAAqB,WAAa,GAA1E,kBACA,mBAAGsB,IAAI,aAAaF,KAAMG,EAAcC,OAAO,SAA/C,qBACA,mBAAGJ,KAAMnB,EAAQ,UAAWoB,UAAqB,UAAVrB,EAAoB,WAAa,GAAxE,mBACA,sBAAKqB,UAAU,WAAf,UACI,mBAAGD,KAAMjB,6BAAwCkB,UAAoB,UAATtB,EAAA,WAAgC,GAA5F,mBADJ,YAEI,mBAAGqB,KAAMjB,6BAAwCkB,UAAoB,UAATtB,EAAA,WAAgC,GAA5F,sBAEJ,sBAAKsB,UAAU,SAAf,UACI,mBACID,KAAK,IACLC,UAAmB,UAARjB,EAAA,WAA+B,GAC1CqB,QAAS,SAAChB,GAAD,OAASF,EAAU,QAASE,IAHzC,mBADJ,YASI,mBACIW,KAAK,IACLC,UAAmB,WAARjB,EAAA,WAAgC,GAC3CqB,QAAS,SAAChB,GAAD,OAASF,EAAU,SAAUE,IAH1C,oBAOA,sBAAMY,UAAU,OAAOK,WAAUC,EAAK5B,GAAL,KAAoB6B,WAAS,SAA9D,SACI,mBAAGP,UAAU,+BAGrB,cAAC,IAAD,CAAcQ,WAAS,EAACC,OAAO,QAAQT,UAAU,gCAAgCN,GAAG,cAKhG,IAAMY,EAA4B,CAC9B,QAAS,CACL,KAAO,ySAIX,QAAS,CACL,KAAO,kWAMTJ,EAAe,iJ,wCC8VfQ,EAAW,CA3YQ,CACrBhB,GAAI,UACJI,MAAO,CACH,QAAS,eACT,QAAS,eAEba,YAAa,CACT,QAAQ,+mBAOR,QAAQ,mgBAOZC,UAAW,CACP,QAAS,kFACT,QAAS,wEAEbC,SAAU,CACN,QAAS,CACL,wDACA,mDACA,wCACA,mEACA,2CACA,4CANK,+IASL,qFACA,QAEJ,QAAS,CACL,8CACA,8CACA,yCACA,2DACA,yCACA,+CANK,uFAQL,wEACA,UAGRC,KAAM,CACF,QAAQ,kCACR,QAAQ,kCAIK,CACjBpB,GAAI,MACJI,MAAO,CACH,QAAS,WACT,QAAS,QAEba,YAAa,CACT,QAAS,yHACT,QAAS,oHAEbC,UAAW,CACP,QAAS,yEACT,QAAS,2DAEbC,SAAU,CACN,QAAS,CACL,wDACA,mDACA,wCACA,8EACA,iCACA,2CACA,iCACA,2BACA,8BACA,mDACA,iEACA,2BACA,2CACA,0EACA,2CACA,QAEJ,QAAS,CACL,8CACA,8CACA,yCACA,sEACA,gCACA,yCACA,gCACA,4BACA,8BACA,4BACA,iDACA,2DACA,4BACA,yCACA,iEAfK,uFAiBL,wEACA,UAGRC,KAAM,CACF,QAAQ,mCACR,QAAQ,iCAIe,CAC3BpB,GAAI,gBACJI,MAAO,CACH,QAAS,oBACT,QAAS,kBAEba,YAAa,CACT,QAAS,8IACT,QAAS,2HAEbC,UAAW,CACP,QAAQ,2LAER,QAAQ,kLAGZC,SAAU,CACN,QAAS,CACL,wDACA,mDACA,wCACA,+DACA,yCACA,2BACA,mDACA,mDACA,2EACA,yCACA,2EACA,6FACA,6DACA,8EACA,2CACA,yCACA,2CACA,8BACA,2FACA,4EACA,2BACA,gGACA,2BACA,kGACA,2CACA,wCACA,QAEJ,QAAS,CACL,8CACA,8CACA,yCACA,2DACA,qCACA,4BACA,gDACA,2EACA,6FACA,yCACA,qCACA,yCACA,8BACA,kFACA,gEACA,4BACA,wFACA,4BACA,0FAnBK,uFAqBL,wEACA,UAGRC,KAAM,CACF,QAAS,2DACT,QAAS,uDAIuB,CACpCpB,GAAI,mBACJI,MAAO,CACH,QAAS,yBACT,QAAS,wBAEba,YAAa,CACT,QAAQ,wUAIR,QAAQ,gTAIZC,UAAW,CACP,QAAQ,mFACR,QAAQ,wFAEZC,SAAU,CACN,QAAS,CACL,wDACA,kDACA,wCACA,sFACA,2BACA,iEACA,+EACA,iCACA,2CACA,+EACA,iCACA,2BACA,gFACA,2CACA,wCACA,QAEJ,QAAS,CACL,8CACA,8CACA,yCACA,sEACA,4BACA,iEACA,oEACA,gCACA,yCACA,oEACA,mCACA,4BACA,kEAbK,uFAeL,wEACA,UAGRC,KAAM,CACF,QAAS,gCACT,QAAS,gCAIY,CACzBpB,GAAI,cACJI,MAAO,CACH,QAAS,kBACT,QAAS,gBAEba,YAAa,CACT,QAAQ,kRAER,QAAQ,wPAGZC,UAAW,CACP,QAAQ,+LAER,QAAQ,qKAGZC,SAAU,CACN,QAAS,CACL,wDACA,kDACA,2BACA,8BACA,2BACA,8EACA,qCACA,2BACA,sCACA,2BACA,0CACA,8BACA,yCACA,yGACA,2BACA,iCACA,4BACA,8BACA,4BACA,yGACA,2CACA,8BAEA,6DACA,8BACA,sEACA,mEACA,4BACA,6FACA,2CACA,oCACA,2CACA,oCACA,4BACA,2CACA,2GACA,mDACA,2EAEA,yCACA,yCACA,+BAEA,0CACA,yCACA,+BAEA,sCACA,qCAEA,QAEJ,QAAS,CACL,8CACA,8CACA,4BACA,8BACA,4BACA,0EACA,oCACA,4BACA,iCACA,4BACA,wCACA,8BACA,2CACA,wFACA,4BACA,kCACA,6BACA,8BACA,6BACA,wFACA,yCACA,8BAEA,sDACA,8BACA,gEACA,iFACA,6BACA,oFACA,yCACA,mCACA,yCACA,mCACA,6BACA,yCACA,0FApCK,uFAsCL,wEACA,UAGRC,KAAM,CACF,QACI,mOASJ,QACI,0NAeGJ,IClZFK,EAAgBC,IAAMC,cAA6B,IAEjD,SAASC,EAAc3C,GAAyC,IAAD,EAChDyC,IAAMG,SAAgB,CAC5CC,SAAU7C,EAAMG,KAChB2C,aAAc,IAHwD,mBACnEC,EADmE,KAC5DC,EAD4D,KAMpEC,EAAiBR,IAAMS,aAAY,SAAC/C,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","file":"static/js/5.d96413ef.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\nimport ReactTooltip from 'react-tooltip'\r\nimport { parseRoute } from '../utils'\r\nimport './style.scss'\r\n\r\nexport default function Header(props: any) {\r\n    const { root, lang, route } = parseRoute()\r\n    const makeUrl = (path: string) => `${process.env.PUBLIC_URL}/${root}${ !root ? '' : '/' }${path}`\r\n    const stt = localStorage.getItem('STT') || 'azure'\r\n\r\n    const changeStt = (val: string, evt: React.MouseEvent) => {\r\n        evt.preventDefault()\r\n\r\n        localStorage.setItem('STT', val)\r\n\r\n        return window.location.reload()\r\n    }\r\n\r\n    return (\r\n        <nav id=\"top-nav\">\r\n            <figure>\r\n                <img src={`${process.env.PUBLIC_URL}/logo-purple.png`} alt=\"logo\" height=\"40\" title=\"Brand logo\"/>\r\n            </figure>\r\n            <a href={makeUrl('')} className={route === 'index' ? 'selected' : ''}>Home</a>\r\n            <a href={makeUrl('webapp/')} className={route === 'webapp' ? 'selected' : ''}>Demo</a>\r\n            <a rel=\"noreferrer\" href={ARTICLE_LINK} target=\"_blank\">Article</a>\r\n            <a href={makeUrl('about/')} className={route === 'about' ? 'selected' : ''}>About</a>\r\n            <div className=\"language\">\r\n                <a href={process.env.PUBLIC_URL + \"/en/webapp/\"} className={lang === 'en-US' ? `selected` : ''}>en-US</a>&nbsp;/&nbsp;\r\n                <a href={process.env.PUBLIC_URL + \"/pt/webapp/\"} className={lang === 'pt-BR' ? `selected` : ''}>pt-BR</a>\r\n            </div>\r\n            <div className=\"config\">\r\n                <a\r\n                    href=\"#\"\r\n                    className={stt === 'azure' ? `selected` : ''}\r\n                    onClick={(evt) => changeStt('azure', evt)}\r\n                >\r\n                    Azure\r\n                </a>\r\n                &nbsp;/&nbsp;\r\n                <a\r\n                    href=\"#\"\r\n                    className={stt === 'chrome' ? `selected` : ''}\r\n                    onClick={(evt) => changeStt('chrome', evt)}\r\n                >\r\n                    Chrome\r\n                </a>\r\n                <span className=\"help\" data-tip={i18n[lang]['help']} data-for=\"header\">\r\n                    <i className=\"fa fa-question-circle\" />\r\n                </span>\r\n            </div>\r\n            <ReactTooltip multiline effect=\"solid\" className=\"custom-tooltip tooltip-header\" id=\"header\" />\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst i18n: Record<string, any> = {\r\n    'en-US': {\r\n        'help': `Which Speech to Text provider should be used ?<br/>\r\n        Azure is the default option, but since it is a paid service it may not be available all the time.<br/>\r\n        Chrome is the native Speech to Text provider of the Google Chrome browser, it's a free service and only works on Chrome.`\r\n    },\r\n    'pt-BR': {\r\n        'help': `Qual o provedor de Speech to Text deve ser usado ?<br/>\r\n        Azure é a opção padrão, por se tratar de um serviço pago, pode não estar disponível a todo momento.<br/>\r\n        Chrome é o serviço nativo de conversão de fala em texto do navegador Google Chrome, é um serviço grátis e só funciona no Chrome.`\r\n    }\r\n}\r\n\r\nconst ARTICLE_LINK = \"https://pedrooaugusto.github.io/Programming With Voice - Assistive Technology Tool For Programming In JavaScript Using Voice - Pedro Silva.pdf\"\r\n","export interface Problem {\r\n    id: string;\r\n    index?: number;\r\n    title: {\r\n        'pt-BR': string;\r\n        'en-US': string;\r\n    };\r\n    placeholder: {\r\n        'pt-BR': string;\r\n        'en-US': string;\r\n    };\r\n    statement: {\r\n        'pt-BR': string;\r\n        'en-US': string;\r\n    };\r\n    solution: {\r\n        'pt-BR': string[];\r\n        'en-US': string[];\r\n    };\r\n    code: {\r\n        'pt-BR': string;\r\n        'en-US': string;\r\n    };\r\n}\r\n\r\nconst welcome: Problem = {\r\n    id: 'welcome',\r\n    title: {\r\n        'pt-BR': 'Olá Mundo',\r\n        'en-US': 'Hello World'\r\n    },\r\n    placeholder: {\r\n        'pt-BR': `Speech2Code é uma aplicação desktop que lhe permite programar usando apenas comandos de voz, \r\n        ela funciona manipulando IDE's e editores do código com base na análise de comandos de voz recebidos como entrada.<br/>\r\n        Nesta página, um demo da aplicação mencionada <u>portada para a web</u>, você pode aprender como usá-la resolvendo\r\n        programas de programação simples na linguagem JavaScript.<br/><br/>\r\n        O primeiro problema é o clássico \"Olá mundo\" onde você precisa escrever a string \"Olá mundo\"\r\n        na sáida padrão do sistema.`,\r\n\r\n        'en-US': `Speech2Code is a desktop application that enables you to code using just voice commands, \r\n        it achieves that by connecting to your favorite IDE and issuing commands to it. This page is a demo\r\n        of said application <u>ported to the web</u>, here you can learn how to use this tool by solving simple \r\n        programming problems using just voice commands.<br/><br/>\r\n        The first problem is the classic \"hello world\" where you are meant to write \"hello world\" to\r\n        the standard output.`\r\n    },\r\n    statement: {\r\n        'pt-BR': 'Escreva a string \"olá mundo\" na sáida padrão do sistema em JavaScript.',\r\n        'en-US': 'Write the string \"hello world\" to the standard output in JavaScript.'\r\n    },\r\n    solution: {\r\n        'pt-BR': [\r\n            'Clique no microfone para começar a gravação.',\r\n            'Clique na primeira linha do editor de código.',\r\n            'Diga a frase: \"vá para a linha 4.\"',\r\n            'Diga a frase: \"execute a função mostrar com um argumento\".',\r\n            'Diga a frase: \"selecione a palavra gap\".',\r\n            'Diga a frase: \"texto olá mundo texto\".',\r\n            `Diga a frase: \"execute o arquivo atual\" ou clique no ícone verde acima do editor de código\r\n                para executar o código.`,\r\n            '<i>Valide a saída do programa no seção abaixo do editor de código.</i>',\r\n            'Fim.'\r\n        ],\r\n        'en-US': [\r\n            'Click on the microphone to start recording.',\r\n            'Click on the first line of the code editor.',\r\n            'Say the phrase: \"go to line number 4.\"',\r\n            'Say the phrase: \"call function print with one argument\".',\r\n            'Say the phrase: \"select the word gap\".',\r\n            'Say the phrase: \"string hello world string\".',\r\n            `Say the phrase: \"run current file\" or click on the green icon above the code editor.`,\r\n            '<i>Check the program output in the section below the code editor.</i>',\r\n            'Done.'\r\n        ]\r\n    },\r\n    code: {\r\n        'pt-BR': `const mostrar = console.log\\n\\n`,\r\n        'en-US': `const print = console.log\\n\\n`\r\n    }\r\n}\r\n\r\nconst avg: Problem = {\r\n    id: 'avg',\r\n    title: {\r\n        'pt-BR': 'Média',\r\n        'en-US': 'Mean'\r\n    },\r\n    placeholder: {\r\n        'pt-BR': 'Computar a média entre dois números.<br/><br/>É possível dizer \"remover linha\" para remover a linha atual.',\r\n        'en-US': 'Calculate the mean between two numbers.<br/><br/>It\\'s possible to say \"remove line\" to remove the current line.'\r\n    },\r\n    statement: {\r\n        'pt-BR': 'Crie uma função que retorne a média de entre dois números.',\r\n        'en-US': 'Write a function to compute the average of two numbers.'\r\n    },\r\n    solution: {\r\n        'pt-BR': [\r\n            'Clique no microfone para começar a gravação.',\r\n            'Clique na primeira linha do editor de código.',\r\n            'Diga a frase: \"vá para a linha 2.\"',\r\n            'Diga a frase: \"nova função média com 2 argumentos retornando gap\".',\r\n            'Diga a frase: \"variável b\".',\r\n            'Diga a frase: \"selecione a palavra gap\".',\r\n            'Diga a frase: \"variável c\".',\r\n            'Diga a frase: \"linha 3\".',\r\n            'Diga a frase: \"nova linha\".',\r\n            'Diga a frase: \"nova constante soma igual a gap\".',\r\n            'Diga a frase: \"expressão variável b mais variável c\".',\r\n            'Diga a frase: \"linha 4\".',\r\n            'Diga a frase: \"selecione a palavra gap\".',\r\n            'Diga a frase: \"expressão variável soma dividido por número 2\".',\r\n            'Diga a frase: \"execute o arquivo atual\".',\r\n            'Fim.'\r\n        ],\r\n        'en-US': [\r\n            'Click on the microphone to start recording.',\r\n            'Click on the first line of the code editor.',\r\n            'Say the phrase: \"go to line number 2.\"',\r\n            'Say the phrase: \"new function mean with 2 arguments returning gap\".',\r\n            'Say the phrase: \"variable b\".',\r\n            'Say the phrase: \"select the word gap\".',\r\n            'Say the phrase: \"variable c\".',\r\n            'Say the phrase: \"line 3\".',\r\n            'Say the phrase: \"new line\".',\r\n            'Say the phrase: \"line 3\".',\r\n            'Say the phrase: \"new constant sum equals gap\".',\r\n            'Say the phrase: \"expression variable b plus variable c\".',\r\n            'Say the phrase: \"line 4\".',\r\n            'Say the phrase: \"select the word gap\".',\r\n            'Say the phrase: \"expression variable sum divided by number 2\".',\r\n            `Say the phrase: \"run current file\" or click on the green icon above the code editor.`,\r\n            '<i>Check the program output in the section below the code editor.</i>',\r\n            'Done.'\r\n        ]\r\n    },\r\n    code: {\r\n        'pt-BR': `\\n\\nconsole.log(média(23, 7))`,\r\n        'en-US': `\\n\\nconsole.log(mean(23, 7))`\r\n    }\r\n}\r\n\r\nconst perfectSquare: Problem = {\r\n    id: 'perfectSquare',\r\n    title: {\r\n        'pt-BR': 'Quadrado Perfeito',\r\n        'en-US': 'Perfect Square'\r\n    },\r\n    placeholder: {\r\n        'pt-BR': 'Teste se um número é um quadrado perfeito.<br/><br/>É possível dizer \"escreva ...\" para escrever qualquer coisa na linha atual.',\r\n        'en-US': 'Test if a number is a perfect square.<br/><br/>It\\'s possible to say \"write ...\" to write anything in the current line.'\r\n    },\r\n    statement: {\r\n        'pt-BR': `Crie uma função para checar se um número é um quadrado perfeito. Escreva na tela\r\n            'quadrado perfeito' em caso positivo e 'quadrado imperfeito' em caso negativo.`,\r\n        'en-US': `Write a function to check if a given number is a perfect square.\r\n            Write to the standard output <i>'perfect square'</i> if yes and <i>'imperfect square'</i> if no.`\r\n    },\r\n    solution: {\r\n        'pt-BR': [\r\n            'Clique no microfone para começar a gravação.',\r\n            'Clique na primeira linha do editor de código.',\r\n            'Diga a frase: \"vá para a linha 2.\"',\r\n            'Diga a frase: \"nova função quadrado com um argumento\".',\r\n            'Diga a frase: \"variável número\".',\r\n            'Diga a frase: \"linha 3\".',\r\n            'Diga a frase: \"variável número igual gap\".',\r\n            'Diga a frase: \"mude a linguagem para inglês\".',\r\n            '<i>A partir de agora os comandos de voz serão ditos em inglês.</i>',\r\n            'Say the phrase: \"select the word gap\".',\r\n            'Say the phrase: \"call function gap on namespace math with one argument\".',\r\n            'Say the phrase: \"write SQRT\".<br/><i>Just say the letters, you can try multiple times</i>.',\r\n            'Say the phrase: \"switch back language back to portuguese\".',\r\n            '<i>A partir de agora os comandos de voz serão ditos em português.</i>',\r\n            'Diga a frase: \"selecione a palavra gap\".',\r\n            'Diga a frase: \"variável número\".',\r\n            'Diga a frase: \"ponteiro final da linha\".',\r\n            'Diga a frase: \"nova linha\".',\r\n            'Diga a frase: \"estrutura condicional se senão expressão gap igual ao número 0\".',\r\n            'Diga a frase: \"expressão variável número módulo número 1\".',\r\n            'Diga a frase: \"linha 5\".',\r\n            'Diga a frase: \"execute a função mostrar com o argumento texto quadrado perfeito texto\".',\r\n            'Diga a frase: \"linha 7\".',\r\n            'Diga a frase: \"execute a função mostrar com o argumento texto quadrado imperfeito texto\".',\r\n            'Diga a frase: \"execute o arquivo atual\".',\r\n            '<i>Valide a saída do programa.</i>',\r\n            'Fim.'\r\n        ],\r\n        'en-US': [\r\n            'Click on the microphone to start recording.',\r\n            'Click on the first line of the code editor.',\r\n            'Say the phrase: \"go to line number 2.\"',\r\n            'Say the phrase: \"new function square with one argument\".',\r\n            'Say the phrase: \"variable number\".',\r\n            'Say the phrase: \"line 3\".',\r\n            'Say the phrase: \"variable number equals gap\".',\r\n            'Say the phrase: \"call function gap on namespace math with one argument\".',\r\n            'Say the phrase: \"write SQRT\".<br/><i>Just say the letters, you can try multiple times</i>.',\r\n            'Say the phrase: \"select the word gap\".',\r\n            'Say the phrase: \"variable number\".',\r\n            'Say the phrase: \"pointer end of line\".',\r\n            'Say the phrase: \"new line\".',\r\n            'Say the phrase: \"conditional statement if else expression gap equals number 0\".',\r\n            'Say the phrase: \"expression variable number module number 1\".',\r\n            'Say the phrase: \"line 5\".',\r\n            'Say the phrase: \"call function print with the argument string perfect square string\".',\r\n            'Say the phrase: \"line 7\".',\r\n            'Say the phrase: \"call function print with the argument string imperfect square string\".',\r\n            `Say the phrase: \"run current file\" or click on the green icon above the code editor.`,\r\n            '<i>Check the program output in the section below the code editor.</i>',\r\n            'Done.'\r\n        ]\r\n    },\r\n    code: {\r\n        'pt-BR': '\\n\\nvar mostrar = console.log\\nquadrado(4)\\nquadrado(13)',\r\n        'en-US': '\\n\\nvar print = console.log\\nsquare(4)\\nsquare(13)'\r\n    }\r\n}\r\n\r\nconst multiplesOfSevenAndSix: Problem = {\r\n    id: 'multipleSevenSix',\r\n    title: {\r\n        'pt-BR': 'Múltiplos de 6 ou 7',\r\n        'en-US': 'Multiples of 6 and 7'\r\n    },\r\n    placeholder: {\r\n        'pt-BR': `Use um <i>for loop</i> para listar múltiplos de 6 ou 7.<br/><br/>\r\n            É possível dizer \"selecione da linha 3 até a linha 6\" para selecionar o intervalo\r\n            entre estas linhas ou ainda \"selecione da letra A até a letra T\" para selecionar o\r\n            texto entre essas letras na linha atual.`,\r\n        'en-US': `Use a <i>for loop</i> to list every multiple of 6 or 7.<br/><br/>\r\n            It's possible to say \"select from line 3 to line 6\" to select the interval between those lines or even\r\n            \"select from letter A to the letter T\" to select the interval between those letters in the current line.`\r\n    },\r\n    statement: {\r\n        'pt-BR': `Escreva na tela todos os múltiplos dos números 6 ou 7 no intervalo 0..256.`,\r\n        'en-US': `Write a function to list every multiple of the number 6 or 7 in the inverval 0..256.`\r\n    },\r\n    solution: {\r\n        'pt-BR': [\r\n            'Clique no microfone para começar a gravação.',\r\n            'Clique na segunda linha do editor de código.',\r\n            'Diga a frase: \"vá para a linha 4\".',\r\n            'Diga a frase: \"estrutura de repetição do número 0 até o número 256\".',\r\n            'Diga a frase: \"linha 5\".',\r\n            'Diga a frase: \"estrutura condicional expressão gap ou gap\".',\r\n            'Diga a frase: \"expressão gap módulo número 6 igual ao número 0\".',\r\n            'Diga a frase: \"variável i\".',\r\n            'Diga a frase: \"selecione a palavra gap\".',\r\n            'Diga a frase: \"expressão gap módulo número 7 igual ao número 0\".',\r\n            'Diga a frase: \"variável i\".',\r\n            'Diga a frase: \"linha 6\".',\r\n            'Diga a frase: \"execute a função mostrar com o argumento variável i\".',\r\n            'Diga a frase: \"execute o arquivo atual\".',\r\n            '<i>Valide a saída do programa.</i>',\r\n            'Fim.'\r\n        ],\r\n        'en-US': [\r\n            'Click on the microphone to start recording.',\r\n            'Click on the first line of the code editor.',\r\n            'Say the phrase: \"go to line number 4.\"',\r\n            'Say the phrase: \"repetition statement from number 0 to number 256\".',\r\n            'Say the phrase: \"line 5\".',\r\n            'Say the phrase: \"conditional statement expression gap or gap\".',\r\n            'Say the phrase: \"expression gap module number 6 equals number 0\".',\r\n            'Say the phrase: \"variable i\".',\r\n            'Say the phrase: \"select the word gap\".',\r\n            'Say the phrase: \"expression gap module number 7 equals number 0\".',\r\n            'Say the phrase: \"variável i\".',\r\n            'Say the phrase: \"line 6\".',\r\n            'Say the phrase: \"call function print with argument variable i\".',\r\n            `Say the phrase: \"run current file\" or click on the green icon above the code editor.`,\r\n            '<i>Check the program output in the section below the code editor.</i>',\r\n            'Done.'\r\n        ]\r\n    },\r\n    code: {\r\n        'pt-BR': 'var mostrar = console.log\\n\\n',\r\n        'en-US': 'var print = console.log\\n\\n'\r\n    }\r\n}\r\n\r\nconst happyNumber: Problem = {\r\n    id: 'happyNumber',\r\n    title: {\r\n        'pt-BR': 'Número Feliz',\r\n        'en-US': 'Happy Number'\r\n    },\r\n    placeholder: {\r\n        'pt-BR': `Teste se um número qualquer <i>N</i> é um <a target=\"_blank\" href=\"https://pt.wikipedia.org/wiki/N%C3%BAmero_feliz\">Número Feliz</a>.<br/><br/>\r\n            É possível dizer \"troque a linguagem para inglês\" para mudar o idioma de entrada para inglês.`,\r\n        'en-US': `Test if a given number <i>N</i> is a <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Happy_number\">Happy Number</a>.<br/><br/>\r\n            It's possible to say \"change language to portuguese\" to change the input language to portuguese.`\r\n    },\r\n    statement: {\r\n        'pt-BR': `Complete a função para determinar se um número natural qualquer é um\r\n            <a target=\"_blank\" href=\"https://pt.wikipedia.org/wiki/N%C3%BAmero_feliz\">número feliz</a>.`,\r\n        'en-US': `Complete the function to test if a given natural number is a \r\n            <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Happy_number\">Happy Number</a>.`\r\n    },\r\n    solution: {\r\n        'pt-BR': [\r\n            'Clique no microfone para começar a gravação.',\r\n            'Clique na segunda linha do editor de código.',\r\n            'Diga a frase: \"linha 5\".',\r\n            'Diga a frase: \"nova linha\".',\r\n            'Diga a frase: \"linha 5\".',\r\n            'Diga a frase: \"estrutura condicional expressão gap igual a número 1\".',\r\n            'Diga a frase: \"variável valor\".',\r\n            'Diga a frase: \"linha 6\".',\r\n            'Diga a frase: \"retorne verdadeiro\".',\r\n            'Diga a frase: \"linha 7\".',\r\n            'Diag a frase: \"ponteiro final da linha\"',\r\n            'Diga a frase: \"nova linha\".',\r\n            'Diga a frase: \"estrutura condicional\".',\r\n            'Diga a frase: \"execute a função gap na variável visitados com o argumento variável valor\".',\r\n            'Diga a frase: \"linha 9\".',\r\n            'Diga a frase: \"retorne falso\".',\r\n            'Diga a frase: \"linha 11\".',\r\n            'Diga a frase: \"nova linha\".',\r\n            'Diga a frase: \"linha 11\".',\r\n            'Diga a frase: \"execute a função gap na variável visitados com o argumento variável valor\".',\r\n            'Diga a frase: \"ponteiro final da linha\".',\r\n            'Diga a frase: \"nova linha\".',\r\n// stop here\r\n            'Diga a frase: \"nova variável soma igual a número 0\".',\r\n            'Diga a frase: \"nova linha\".',\r\n            'Diga a frase: \"estrutura de repetição para todo item em gap\".',\r\n            'Diga a frase: \"expressão variável valor mais texto texto\".',\r\n            'Diga a frase: \"linha 14\".',\r\n            'Diga a frase: \"variável soma igual a expressão variável soma mais gap vezes gap\".', // maybe fix that: select gap when its done.\r\n            'Diga a frase: \"selecione a palavra gap\".',\r\n            'Diga a frase: \"variável item\".',\r\n            'Diga a frase: \"selecione a palavra gap\".',\r\n            'Diga a frase: \"variável item\".',\r\n            'Diga a frase: \"linha 16\".',\r\n            'Diga a frase: \"selecione a palavra gap\".',\r\n            'Diga a frase: \"execute a função feliz com os argumentos variável soma e variável visitados\".',\r\n            'Diga a frase: \"mude a linguagem para inglês\".',\r\n            '<i>A partir de agora os comandos de voz serão ditos em inglês.</i>',\r\n\r\n            'Say the phrase: \"please go to line 8\".',\r\n            'Say the phrase: \"select the word gap\".',\r\n            'Say the phrase: \"print has\".',\r\n\r\n            'Say the phrase: \"please go to line 11\".',\r\n            'Say the phrase: \"select the word gap\".',\r\n            'Say the phrase: \"print add\".',\r\n\r\n            'Say the phrase: \"run current file\".',\r\n            '<i>Validate the system output.</i>',\r\n\r\n            'End.'\r\n        ],\r\n        'en-US': [\r\n            'Click on the microphone to start recording.',\r\n            'Click on the first line of the code editor.',\r\n            'Say the phrase: \"line 5\".',\r\n            'Say the phrase: \"new line\".',\r\n            'Say the phrase: \"line 5\".',\r\n            'Say the phrase: \"conditional statement expression gap equals number 1\".',\r\n            'Say the phrase: \"variable value\".',\r\n            'Say the phrase: \"line 6\".',\r\n            'Say the phrase: \"return true\".',\r\n            'Say the phrase: \"line 7\".',\r\n            'Say the phrase: \"pointer end of line\"',\r\n            'Say the phrase: \"new line\".',\r\n            'Say the phrase: \"conditional statement\".',\r\n            'Say the phrase: \"call function has on variable visited with argument variable value\".',\r\n            'Say the phrase: \"line 9\".',\r\n            'Say the phrase: \"return false\".',\r\n            'Say the phrase: \"line 11\".',\r\n            'Say the phrase: \"new line\".',\r\n            'Say the phrase: \"line 11\".',\r\n            'Say the phrase: \"call function add on variable visited with argument variable value\".',\r\n            'Say the phrase: \"pointer end of line\".',\r\n            'Say the phrase: \"new line\".',\r\n\r\n            'Say the phrase: \"new variable sum equals number 0\".',\r\n            'Say the phrase: \"new line\".',\r\n            'Say the phrase: \"repetition statement for every item in gap\".',\r\n            'Say the phrase: \"call function asterisk to string asterisk on variable value\".',\r\n            'Say the phrase: \"line 14\".',\r\n            'Say the phrase: \"variable sum equals expression variable sum plus gap times gap\".', // maybe fix that: select gap when its done.\r\n            'Say the phrase: \"select the word gap\".',\r\n            'Say the phrase: \"variable item\".',\r\n            'Say the phrase: \"select the word gap\".',\r\n            'Say the phrase: \"variable item\".',\r\n            'Say the phrase: \"line 16\".',\r\n            'Say the phrase: \"select the word gap\".',\r\n            'Say the phrase: \"call function happy with arguments variable sum and variable visited\".',\r\n            `Say the phrase: \"run current file\" or click on the green icon above the code editor.`,\r\n            '<i>Check the program output in the section below the code editor.</i>',\r\n            'Done.'\r\n        ]\r\n    },\r\n    code: {\r\n        'pt-BR':\r\n            'var mostrar = console.log\\n\\n' +\r\n            'function feliz(valor, visitados) {\\n' +\r\n            '    return gap\\n' +\r\n            '}\\n' +\r\n            '\\n' +\r\n            'mostrar(23, feliz(23, new Set()))\\n' +\r\n            'mostrar(4, feliz(4, new Set()))\\n' +\r\n            'mostrar(440, feliz(440, new Set()))\\n' +\r\n            'mostrar(3, feliz(3, new Set()))\\n',\r\n        'en-US':\r\n            'var print = console.log\\n\\n' +\r\n            'function happy(value, visited) {\\n' +\r\n            '    return gap\\n' +\r\n            '}\\n' +\r\n            '\\n' +\r\n            'print(23, happy(23, new Set()))\\n' +\r\n            'print(4, happy(4, new Set()))\\n' +\r\n            'print(440, happy(440, new Set()))\\n' +\r\n            'print(3, happy(3, new Set()))\\n',\r\n    }\r\n}\r\n\r\n\r\nconst problems = [welcome, avg, perfectSquare, multiplesOfSevenAndSix, happyNumber]\r\n\r\nexport default problems\r\n\r\nexport const concretize = (index: number, lang: 'pt-BR' | 'en-US') => ({\r\n    get id() { return problems[index].id },\r\n    get index() { return index },\r\n    get title() { return problems[index].title[lang] },\r\n    get placeholder() { return problems[index].placeholder[lang] },\r\n    get statement() { return problems[index].statement[lang] },\r\n    get solution() { return problems[index].solution[lang] },\r\n    get code() { return problems[index]?.code?.[lang] ||'' },\r\n})\r\n","import React from 'react'\r\nimport { concretize } from '../tutorial/problems'\r\n\r\ndeclare global {\r\n    interface Console { logs?: string[][], defaultLog?: Function }\r\n}\r\n\r\nexport type MyContextType = {\r\n    changeProblem: (id: number) => void\r\n    changeLanguage: (lang: string) => any\r\n    problem: ReturnType<typeof concretize>,\r\n    isMobile: boolean\r\n} & State\r\n\r\ntype State = {\r\n    language: string\r\n    problemIndex: number\r\n}\r\n\r\n// @ts-ignore\r\nexport const GlobalContext = React.createContext<MyContextType>({})\r\n\r\nexport default function GloablContext(props: { children: any, lang: string }) {\r\n    const [state, setState] = React.useState<State>({\r\n        language: props.lang,\r\n        problemIndex: 4\r\n    })\r\n\r\n    const changeLanguage = React.useCallback((lang: string) => setState((s) => ({...s, language: lang})), [])\r\n\r\n    const changeProblem = React.useCallback((id: number) => setState((s) => ({ ...s, problemIndex: id })), [])\r\n\r\n    const isMobile = window.matchMedia(\"only screen and (max-width: 900px)\").matches\r\n\r\n    const value = React.useMemo(() => ({\r\n        language: state.language,\r\n        problemIndex: state.problemIndex,\r\n        changeProblem,\r\n        changeLanguage,\r\n        isMobile,\r\n        problem: concretize(state.problemIndex, state.language as 'en-US' | 'pt-BR'),\r\n    }), [state.language, state.problemIndex, changeLanguage, changeProblem, isMobile])\r\n\r\n    return (\r\n        <GlobalContext.Provider value={value}>\r\n            {props.children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}","import React from 'react'\r\nimport CodeMirror from 'codemirror'\r\nimport EditorService from '../services/editor'\r\nimport { GlobalContext } from '../services/global-context'\r\n\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/idea.css'\r\nimport 'codemirror/addon/selection/active-line.js'\r\nimport 'codemirror/mode/javascript/javascript.js'\r\nimport './style.scss'\r\n\r\ninterface Props {}\r\n\r\nlet myCodeMirror: CodeMirror.Editor | null = null\r\n\r\nexport default React.memo(function Editor(props: Props) {\r\n    const [result, setResult] = React.useState('')\r\n    const [loading, setLoading] = React.useState(false)\r\n\r\n    const { problem } = React.useContext(GlobalContext)\r\n\r\n    React.useEffect(() => {\r\n        myCodeMirror = CodeMirror(document.querySelector('#code-editor')!, {\r\n            lineNumbers: true,\r\n            mode: 'javascript',\r\n            styleActiveLine: true,\r\n            // @ts-ignore\r\n            matchBrackets: true,\r\n            theme: 'idea',\r\n            indentUnit: 4,\r\n            value: '// your code will be written here\\n' + problem.code\r\n        })\r\n\r\n        EditorService.setEditor(myCodeMirror)\r\n\r\n        EditorService.onRunCode({\r\n            before: () => setLoading(true),\r\n            success: (result: string) => setResult(result),\r\n            error: (ex: Error) => setResult(ex.toString()),\r\n            after: () => setLoading(false)\r\n        })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        myCodeMirror?.setValue('// your code will be written here\\n' + problem.code)\r\n        setResult('')\r\n    }, [problem.index, problem.code])\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"code-editor-wrapper\">\r\n                <div className=\"filename\">\r\n                    MyLittleDarkAge.js\r\n                    <span\r\n                        onClick={() => EditorService.runCode()}\r\n                        title=\"Click here to run this file\"\r\n                        className={`${loading ? 'loading' : ''}`}\r\n                    >\r\n                        {loading && <i className=\"fa fa-circle-o-notch fa-spin fa-3x\"></i>}\r\n                        {!loading && <i className=\"fa fa-caret-right\"/>}\r\n                    </span>\r\n                </div>\r\n                <div id=\"code-editor\"></div>\r\n            </div>\r\n            <div className={`output ${loading ? 'loading' : ''}`}>\r\n                <div>\r\n                    <i className=\"fa fa-angle-right\"></i>\r\n                    {loading && <span className=\"fa-3x\"><i className=\"fa fa-circle-o-notch fa-spin\"></i></span>}\r\n                </div>\r\n                {!loading && <pre>{result === '' ? 'empty output' : result}</pre>}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n})","import { ElectronIpc } from '../../../services/electron-ipc'\r\nimport SpokenInterface from './spoken-interface'\r\n\r\ndeclare global {\r\n    interface Window { recording: boolean }\r\n}\r\n\r\nexport interface IPCEvent {\r\n    reply: (channel: string, ...args: any) => void\r\n}\r\n\r\nclass IPCService implements ElectronIpc {\r\n    private handles = new Map<string, (event: IPCEvent, ...args: any) => void>()\r\n\r\n    constructor() {        \r\n        this.onMain('Spoken:executeCommand', SpokenInterface.onComand)\r\n        this.onMain('Config:changeEditor', (event: IPCEvent, editor: any) => {\r\n            this.send('Config:onChangeEditorState', [{ name: 'CODEMIRROR', status: 'ON', current: true }])\r\n        })\r\n\r\n        this.onMain('VoiceRecognition:setRecording', (event: IPCEvent, value: boolean) => {\r\n            this.send('VoiceRecognition:toggleRecording', value)\r\n        })\r\n    }\r\n\r\n    send(channel: string, ...args: any) {\r\n        if (this.handles.has(channel)) {\r\n            const cb = this.handles.get(channel)!\r\n\r\n            setTimeout(() => cb({ reply: this.send.bind(this) }, ...args), 75)\r\n        }\r\n    }\r\n\r\n    removeAllListeners (channel: string) {\r\n        this.handles.delete(channel)\r\n    }\r\n\r\n    on(channel: string, cb: (...args: any) => void) {\r\n        // Remove Event argument\r\n        this.handles.set(channel, (event: IPCEvent, ...args) => cb(...args))\r\n    }\r\n\r\n    onMain(channel: string, cb: (event: IPCEvent, ...args: any) => void) {\r\n        this.handles.set(channel, cb)\r\n    }\r\n}\r\n\r\nwindow.ipcRenderer = window.ipcRenderer || new IPCService()\r\n\r\nexport default window.ipcRenderer","\r\nexport default class MyRecognizer {\r\n    static instance: MyRecognizer | null = null\r\n    public recognizing = false\r\n    private recognizer: SpeechRecognition | null = null\r\n    private handlers = new Map<string, Function>()\r\n\r\n    static getRecognizer(): MyRecognizer {\r\n        if (MyRecognizer.instance == null) {\r\n            MyRecognizer.instance = new MyRecognizer()\r\n        }\r\n\r\n        return MyRecognizer.instance\r\n    }\r\n\r\n    async init(lang: string) {\r\n        // @ts-ignore\r\n        this.recognizer = new webkitSpeechRecognition()\r\n\r\n        if (this.recognizer == null) {\r\n            // @ts-ignore\r\n            return this.handlers.get('error') != null ? this.handlers.get('error')() : null\r\n        }\r\n\r\n        // @ts-ignore\r\n        const speechRecognitionList: SpeechGrammarList = new webkitSpeechGrammarList()\r\n        speechRecognitionList.addFromString('#JSGF V1.0; grammar one; public <gap> = gap;', 1)\r\n        speechRecognitionList.addFromString('#JSGF V1.0; grammar one; public <string> = string;', 1)\r\n\r\n        this.recognizer.grammars = speechRecognitionList\r\n        this.recognizer.continuous = true\r\n        this.recognizer.lang = lang\r\n        this.recognizer.interimResults = false\r\n        this.recognizer.maxAlternatives = 1\r\n\r\n        this.recognizer.onresult = (event) => {\r\n            // console.log('Results', event.results)\r\n\r\n            const fn = this.handlers.get('results')\r\n\r\n            if (fn != null) fn(event.results, true)\r\n        }\r\n\r\n        this.recognizer.onspeechend = () => {\r\n            this.recognizer!.stop()\r\n        }\r\n\r\n        this.recognizer.onnomatch = (event) => {\r\n            console.log('could not recognize that!')\r\n        }\r\n\r\n        this.recognizer.onerror = (event) => {\r\n            const fn = this.handlers.get('error')\r\n\r\n            if (fn != null) fn(event.error)\r\n        }\r\n    }\r\n\r\n    start() {\r\n        if (this.recognizer == null) return console.error('[webapp.services.chrome-voice-recognition]: Session is closed!')\r\n\r\n        this.recognizer.start()\r\n\r\n        this.recognizing = true\r\n\r\n        console.info('[webapp.services.chrome-voice-recognition]: Started')\r\n    }\r\n\r\n    stop() {\r\n        if (this.recognizer == null) return console.error('[webapp.services.chrome-voice-recognition]: Session is closed!')\r\n\r\n        this.recognizer.stop()\r\n\r\n        this.recognizing = false\r\n\r\n        console.info('[webapp.services.chrome-voice-recognition]: Stopped')\r\n    }\r\n\r\n    destroy() {\r\n        console.info('[webapp.services.chrome-voice-recognition]: Destroyed')\r\n        this.recognizer?.stop()\r\n        this.recognizer?.abort()\r\n\r\n        this.recognizer = null\r\n        this.handlers.clear()\r\n    }\r\n\r\n    on(event: string, fn: (...args: any) => void) {\r\n        this.handlers.set(event, fn)\r\n\r\n        return this\r\n    }\r\n}\r\n","import { useState, useEffect, useContext } from 'react'\r\nimport Spoken from 'spoken'\r\nimport IpcRenderer from '../electron-ipc'\r\nimport { VoiceRecognitionHook, RecognitionRequest } from '../use-voice-recognition'\r\nimport MyRecognizer from './voice-recognizer'\r\nimport { GlobalContext } from '../global-context'\r\n\r\nconst useChromeVoiceRecognition: VoiceRecognitionHook = () => {\r\n    const [results, setResults] = useState<RecognitionRequest | null>(null)\r\n    const { language = 'pt-BR', executeInternalCommand } = useContext(GlobalContext)\r\n    const recognizer = MyRecognizer.getRecognizer()\r\n\r\n    useEffect(() => {\r\n        IpcRenderer.on('Spoken:executeCommandResult', (result: any) => {\r\n            // console.log('[webapp.services.chrome-voice-recognition.onResultError]: Execute command result: ', result)\r\n        })\r\n\r\n        return () => {\r\n            IpcRenderer.removeAllListeners('Spoken:executeCommandResult')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log('[webapp.services.chrome-voice-recognition]: Initializing')\r\n\r\n        recognizer\r\n            .on('results', (results: SpeechRecognitionResultList, isFinal: boolean) => {\r\n                const result = results[results.length - 1][0] as SpeechRecognitionAlternative & { text: string }\r\n\r\n                if (!result.transcript || result.transcript.trim() === '') return\r\n\r\n                result.text = result.transcript.trim()\r\n\r\n                const attempt = {\r\n                    text: sanitizePonctuation(result.text),\r\n                    isFinal,\r\n                    id: Date.now(),\r\n                    recognized: false\r\n                }\r\n\r\n                if (isFinal) {\r\n                    const match = findComand(result, language)\r\n\r\n                    attempt.recognized = !!match\r\n\r\n                    if (attempt.recognized) {\r\n                        if (match?.id?.startsWith('__')) executeInternalCommand(match)\r\n                        else IpcRenderer.send('Spoken:executeCommand', match)\r\n                    }\r\n                }\r\n\r\n                setResults(attempt)\r\n            })\r\n            .on('error', (err) => {\r\n                console.error('[webapp.services.chrome-voice-recognition.onResultError]: Error', err)\r\n            })\r\n            .init(language)\r\n\r\n        return () => {\r\n            recognizer.destroy()\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [language])\r\n\r\n    const start = async () => {\r\n        recognizer.start()\r\n    }\r\n\r\n    const stop = async () => {\r\n        recognizer.stop()\r\n    }\r\n\r\n    const analyzeSentence = async (phrase: string, timeout:number | null = 3000) => {        \r\n        const match = findComand({ text: sanitizePonctuation(phrase) }, language)\r\n\r\n        const attempt = {\r\n            text: phrase,\r\n            isFinal: true,\r\n            id: Date.now(),\r\n            recognized: !!match\r\n        }\r\n\r\n        const fn = () => {\r\n            setResults(attempt)\r\n            if (attempt.recognized) {\r\n                if (match?.id?.startsWith('__')) executeInternalCommand(match)\r\n                else IpcRenderer.send('Spoken:executeCommand', match)\r\n            }\r\n        }\r\n\r\n        if (timeout) setTimeout(fn, timeout)\r\n        else fn()\r\n    }\r\n\r\n    return {\r\n        results,\r\n        start,\r\n        stop,\r\n        analyzeSentence\r\n    }\r\n}\r\n\r\nfunction findComand(voiceToTextResponse: { text: string }, language: string) {\r\n    const text = sanitizePonctuation(voiceToTextResponse.text)\r\n    const result = Spoken.recognizePhrase(text.toLocaleLowerCase(), language)\r\n\r\n    if (result != null) {\r\n        result.extra._rawVoiceToTextResponse = voiceToTextResponse\r\n        result.extra.phrase = text\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nfunction sanitizePonctuation(text: string) {\r\n    return text.replace(/(?<! )(:|\\*|,|\\.|\\?|!)/gi, ' $1')\r\n}\r\n\r\nexport default useChromeVoiceRecognition\r\n","import React from 'react'\r\nimport Draggable from 'react-draggable'\r\nimport '../services/ipc-service-emulator'\r\nimport useVoiceRecognition from '../../../services/chrome/use-voice-recognition'\r\nimport { GlobalContext } from '../services/global-context'\r\nimport { factory as AppFactory } from '../../app'\r\nimport './style.scss'\r\n\r\nconst stt = localStorage.getItem('STT') || 'azure'\r\n\r\nconst App = AppFactory(stt === 'azure' ? undefined : useVoiceRecognition)\r\n\r\nexport default React.memo(function Editor() {\r\n    const { language, isMobile } = React.useContext(GlobalContext)\r\n\r\n    if (isMobile) return (\r\n        <AppMobile language={language} />\r\n    )\r\n\r\n    return (\r\n        <Draggable\r\n            axis=\"both\"\r\n            handle=\".handle\"\r\n            cancel=\".control\"\r\n            defaultPosition={{x: -250, y: -50}}\r\n        >\r\n            <div>\r\n                <Speech2Code mode=\"modalx\" language={language} />\r\n            </div>\r\n        </Draggable>\r\n    )\r\n})\r\n\r\nconst AppMobile = (props: { language: string }) => {\r\n    const [mode, setMode] = React.useState<'widget' | 'modalx'>('widget')\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={`overlay ${mode}`}></div>\r\n            <Speech2Code\r\n                mode={mode}\r\n                openModal={() => setMode('modalx')}\r\n                closeModal={() => setMode('widget')}\r\n                language={props.language}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst Speech2Code = (props: {\r\n    mode: 'widget' | 'modalx',\r\n    closeModal?: () => void,\r\n    openModal?: () => void,\r\n    language: string\r\n}) => {\r\n\r\n    return (\r\n        <div className={`speech2code-wrapper ${props.mode}`}>\r\n            <div className=\"window\">\r\n                <div className=\"handle top-bar\">\r\n                    <div className=\"window-title\">Speech2Code</div>\r\n                    <div className=\"controls\">\r\n                        <div className={`control ${!props.closeModal ? 'disabled' : ''}`}>\r\n                            <i\r\n                                className=\"fa fa-window-close\"\r\n                                onClick={() => {\r\n                                    if (props.closeModal) {\r\n                                        // @ts-ignore\r\n                                        document.querySelector('#root').style = 'position: unset'\r\n                                        window.location.hash = ''\r\n                                        props.closeModal()\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"window-content\">\r\n                    <App\r\n                        initialLang={props.language}\r\n                        mode={props.mode}\r\n                        onOpen={() => {\r\n                            if (!props.openModal) return null\r\n\r\n                            // @ts-ignore\r\n                            document.querySelector('#root').style = 'position: fixed'\r\n                            props.openModal()\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport Problems from './problems'\r\nimport { GlobalContext } from '../services/global-context'\r\nimport './style.scss'\r\n\r\ninterface Props {}\r\n\r\nconsole.error('ARRUMAR ao dizer igual vira \"=\"')\r\n\r\nexport default function Tutorial(props: Props) {\r\n    const { language: lang, problem, changeProblem } = React.useContext(GlobalContext)\r\n\r\n    return (\r\n        <div className=\"tutorial-problem\">\r\n            <div className=\"title\">\r\n                {(problem.index + 1)}. {problem.title}\r\n            </div>\r\n            <div className=\"placeholder\" dangerouslySetInnerHTML={{__html: problem.placeholder}}>\r\n            </div>\r\n            <div className=\"statement\">\r\n                <div>\r\n                    <b>{lang === 'pt-BR' ? 'Problema' : 'Problem'}</b>\r\n                </div>\r\n                <div dangerouslySetInnerHTML={{__html: problem.statement}}></div>\r\n            </div>\r\n            <div className=\"solution\">\r\n                <div>\r\n                    <b>{lang === 'pt-BR' ? 'Possível solução' : 'Possible solution'}</b>\r\n                </div>\r\n                <div>\r\n                    <ul>\r\n                        {problem.solution.map((item: string, index: number) => (\r\n                            <li key={index} dangerouslySetInnerHTML={{__html: fmt(item)}}></li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div className=\"footer\">\r\n                <div className=\"prev\">\r\n                    {problem.index > 0 ? <button onClick={() => changeProblem(problem.index - 1)}>{'<<'} Prev</button> : null}\r\n                </div>\r\n                <div className=\"next\">\r\n                    {problem.index < Problems.length - 1 ? <button onClick={() => changeProblem(problem.index + 1)}>Next {'>>'}</button> : null}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst fmt = (str: string) => {\r\n    return str.replace(/\"(.*)\"/gi, '<b>$1</b>')\r\n}\r\n","import React from 'react'\r\nimport Nav from '../@components/header'\r\nimport Editor from './editor'\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport Speech2Code from './speech2code'\r\nimport Tutorial from './tutorial'\r\nimport GlobalContext from './services/global-context'\r\nimport './style.scss'\r\n\r\nexport default React.memo(function Webapp(props: { lang: string }) {\r\n    return (\r\n        <GlobalContext lang={props.lang}>\r\n            <Nav />\r\n            <main className=\"webapp\">\r\n                <div className=\"tutorial\">\r\n                    <Tutorial />\r\n                </div>\r\n                <div className=\"code-editor\">\r\n                    <Editor />\r\n                </div>\r\n                <div className=\"speech2code\">\r\n                    <Speech2Code />\r\n                </div>\r\n            </main>\r\n        </GlobalContext>\r\n    )\r\n})\r\n","import Spoken, { SpokenCommand } from 'spoken'\r\nimport EditorService from './editor'\r\nimport { IPCEvent } from './ipc-service-emulator'\r\n\r\n// @ts-ignore\r\nwindow.editor = EditorService\r\n\r\nclass SpokenInterface {\r\n\r\n    onComand = async (event: IPCEvent, command: SpokenCommand, ...args: unknown[]) => {\r\n        if (command == null) {\r\n            return event.reply('Spoken:executeCommandResult', command, { err: 404 })\r\n        }\r\n\r\n        const [result, err] = await this.execute(command)\r\n\r\n        if (err) {\r\n            return event.reply('Spoken:executeCommandResult', { error: err.toString() || true })\r\n        }\r\n \r\n        console.info('[Spoken]: Result: ' + JSON.stringify(result || null))\r\n\r\n        return event.reply('Spoken:executeCommandResult', { result })\r\n    }\r\n\r\n    private async execute(command: SpokenCommand, parent?: string): Promise<[object | null, Error | null]> {\r\n        try {\r\n            // eslint-disable-next-line no-eval\r\n            const fn = eval(`var exports = {};\\n` + command.impl)\r\n            const [args, err] = await this.parseArgs(command.args, command.id)\r\n            \r\n            if (args == null || err != null) return [null, err]\r\n\r\n            const result = await fn({ ...args, parent }, EditorService, Spoken.context)\r\n\r\n            return [result, null]\r\n        } catch (err) {\r\n            console.error('[wrapper.SpokenInterface.onCommand] Failed to execute command \"' + command.id + '\" with:\\n', err)\r\n            return [null, err]\r\n        }\r\n    }\r\n\r\n    private async parseArgs(args: any, parent: string): Promise<[object | null, Error | null]> {\r\n        for (const key of Object.keys(args)) {\r\n            const innerCommand = args[key] as any\r\n\r\n            if (Array.isArray(innerCommand)) {\r\n                const arr = []\r\n                for (const item of innerCommand) {\r\n                    if (!item.id || !item.impl || !item.lang) {\r\n                        arr.push(item)\r\n                        continue\r\n                    }\r\n\r\n                    const [ab, err] = await this.execute(item, parent)\r\n            \r\n                    if (ab == null || err != null) return [null, err]\r\n\r\n                    arr.push(ab)\r\n                }\r\n                args[key] = arr\r\n            } else {                \r\n                if (!innerCommand.id || !innerCommand.impl || !innerCommand.lang) continue\r\n\r\n                const [result, err] = await this.execute(innerCommand, parent)\r\n\r\n                if (err != null) return [null, err]\r\n\r\n                args[key] = result\r\n            }\r\n        }\r\n\r\n        return [args, null]\r\n    }\r\n}\r\n\r\nexport default new SpokenInterface()\r\n\r\n","import CodeMirror from 'codemirror'\r\nimport { Editor } from 'spoken'\r\n\r\n/**\r\n * CodeMirror implementation of https://github.com/pedrooaugusto/speech-to-code/blob/main/spoken-vscode-driver/src/robot-vscode.ts\r\n * \r\n * This is just a port from VSCode editor to CodeMirror editor and is meant\r\n * to be used in the web.\r\n */\r\n\r\ninterface RunCodeLifeCycle {\r\n    before: () => void,\r\n    success: (result: string) => void,\r\n    error: (ex: Error) => void,\r\n    after: () => void\r\n}\r\n\r\n// @ts-ignore\r\nclass CodeMirrorEditor implements Editor {\r\n    private editor: CodeMirror.Editor | null = null\r\n    private runCodeLifecycle: RunCodeLifeCycle | null = null\r\n\r\n    public getEditor(): [CodeMirror.Editor | null, Error | null] {\r\n        const editor = this.editor\r\n\r\n        if (editor == null) return [null, new Error('No active text editor')]\r\n\r\n        return [editor, null]\r\n    }\r\n\r\n    public setEditor(editor: CodeMirror.Editor) {\r\n        this.editor = editor\r\n    }\r\n\r\n    public onRunCode(lifecycle: RunCodeLifeCycle): void {\r\n        this.runCodeLifecycle = lifecycle\r\n    }\r\n\r\n    public runCode(): void {\r\n        const { after, before, error, success } = this.runCodeLifecycle!\r\n\r\n        before()\r\n\r\n        const code = this.getEditor()[0]!.getValue()\r\n\r\n        this.runThisCode(code).then(success).catch(error).finally(after)\r\n    }\r\n\r\n    /**\r\n\t * Writes something in the current text input\r\n\t * @param text The text to be written\r\n\t */\r\n    async write(text: string = '') {\r\n        Log('[vscode-driver.robot-vscode.write]: Executing write(' + text + ')')\r\n\r\n        const [editor, e] = this.getEditor()\r\n\r\n        if (editor == null) throw e\r\n\r\n        if (editor.getSelection().length > 0) {\r\n            const sel = editor.listSelections()[0]\r\n\r\n            editor.replaceSelection(text)\r\n\r\n            editor.setSelection(sel.anchor, { ...sel.head, ch: sel.anchor.ch + text.length })\r\n        } else {\r\n            editor.replaceRange(text, editor.getCursor())\r\n        }\r\n    }\r\n\r\n    /**\r\n\t * Removes the provided selection/line\r\n     * \r\n\t * @param The line to be removed\r\n\t */\r\n    async remove(selection: number | [[number, number], [number, number]]) {\r\n        Log('[vscode-driver.robot-vscode.write]: Executing remove(' + selection + ')')\r\n\r\n        const [editor, e] = this.getEditor()\r\n\r\n        if (editor == null) throw e\r\n\r\n        editor.execCommand('deleteLine')\r\n    }\r\n\r\n    /**\r\n     * Creates a new line above or below the current line.\r\n     * \r\n     * @returns undefined if evrything went well, error otherwise\r\n     */\r\n    async newLine(pos: 0 | 1) {\r\n        Log('[vscode-driver.robot-vscode.newLine]: Executing newLine')\r\n\r\n        const [editor, e] = this.getEditor()\r\n\r\n        if (editor == null) throw e\r\n\r\n        if (pos === 0) {\r\n            await this.goToLine(String(editor.getCursor().line), 'END')\r\n        }\r\n\r\n        editor.execCommand('newlineAndIndent')\r\n    }\r\n\r\n    /**\r\n     * Moves the cursor to a different line\r\n     * \r\n     * @param number Line number\r\n     * @param string Line position (END, BEGIN)\r\n     */\r\n    async goToLine(number: string, cursorPosition: 'END' | 'BEGIN' = 'BEGIN') {\r\n        const [editor, e] = this.getEditor()\r\n\r\n        if (editor == null) throw e\r\n\r\n        const destLine = parseInt(number) - 1\r\n\r\n        // remove any active selection\r\n        // editor.setSelection(editor.getCursor())\r\n\r\n        const text = editor.getLine(destLine)\r\n\r\n        if (cursorPosition === 'END') {\r\n            editor.setCursor({ line: destLine, ch: Math.max(text.length, 0) })\r\n        } else {\r\n            editor.setCursor({ line: destLine, ch: Math.max(text.length - text.trimLeft().length, 0) })\r\n        }\r\n\r\n        editor.scrollIntoView(null, 200)\r\n\r\n        return text\r\n    }\r\n\r\n    private lineBoundaries(line: string, withWhiteSpace = false) {\r\n        const rStart = withWhiteSpace ? 0 : Math.max(line.length - line.trimLeft().length, 0)\r\n        const rEnd = (withWhiteSpace ? line.length : line.trimRight().length)\r\n\r\n        return {\r\n            relative: [rStart, rEnd]\r\n        }\r\n    }\r\n\r\n    private stringMatchAll(text: string, regex: RegExp) {\r\n        const indices: number[][] = []\r\n        let match = null\r\n\r\n        while ((match = regex.exec(text)) != null) {\r\n            indices.push([match.index, match.index + match[0].length])\r\n        }\r\n\r\n        return indices\r\n    }\r\n\r\n    private findAllOccurrences(lineNumber: number, regex: RegExp, pad: number = 0) {\r\n        const [editor,] = this.getEditor()\r\n\r\n        if (editor == null) return []\r\n\r\n        const line = editor.getLine(lineNumber)\r\n        const text = line.substr(pad)\r\n\r\n        return this.stringMatchAll(text, regex)\r\n    }\r\n\r\n    /**\r\n     * Finds the position of a given token in the current line\r\n     * \r\n     * @param to {string} Where the cursor should move to\r\n     * @param symbol {string} If `to` is SYMBOL, which symbol are we looking for\r\n     * @param leapSize {number} How many matches should be skiped\r\n     */\r\n    async moveCursorTo(to: 'END_LINE' | 'BEGIN_LINE' | 'SYMBOL' | null, symbol: string | undefined, leapSize: number | undefined) {\r\n        const [editor, e] = this.getEditor()\r\n\r\n        if (editor == null) throw e\r\n\r\n        const cursor = editor.getCursor()\r\n\r\n        if (to === 'BEGIN_LINE' || to === 'END_LINE') {\r\n            const { relative } = this.lineBoundaries(editor.getLine(cursor.line))\r\n\r\n            console.log(relative)\r\n\r\n            return editor.setCursor({ line: cursor.line, ch: relative[ to === 'BEGIN_LINE' ? 0 : 1 ] })\r\n        }\r\n\r\n        // Move the cursor {leapSize} units to the right\r\n        if (to === null) {\r\n            return editor.setCursor({ line: cursor.line, ch: cursor.ch + leapSize! })\r\n        }\r\n\r\n        if (to === 'SYMBOL' && symbol !== undefined) {\r\n            const indices = this.findAllOccurrences(cursor.line, new RegExp(symbol, 'gi'), cursor.ch)\r\n\r\n            if (leapSize === -1) leapSize = indices.length\r\n            else if (leapSize == null) leapSize = 1\r\n\r\n            const range = indices[leapSize - 1]\r\n\r\n            if (range == null) throw new Error('Match not found for symbol: ' + symbol)\r\n\r\n            return editor.setCursor({ line: cursor.line, ch: cursor.ch + range[0] })\r\n        }\r\n\r\n        throw new Error('Unknown operation!')\r\n    }\r\n\r\n    /**\r\n     * Finds the range of a term in a given line\r\n     * \r\n     * @param term {RegExp | string} What we are looking for\r\n     * @param line {number} Which line to look for\r\n     */\r\n    async findPositionOf(term: RegExp | string, line?: number, pad?: number): Promise<number[][] | Error> {\r\n        const [editor, e] = this.getEditor()\r\n\r\n        if (editor === null) throw e\r\n\r\n        line = line ?? editor.getCursor().line\r\n\r\n        if (typeof term === 'string') {\r\n            if (term === 'LINE_BOUNDARIES' || term === '') {\r\n                return [this.lineBoundaries(editor.getLine(line), true).relative]\r\n            }\r\n\r\n            term = new RegExp(term, 'gi')\r\n        }\r\n\r\n        return this.findAllOccurrences(line, term, pad)\r\n    }\r\n\r\n    /**\r\n     * Select a pice of text in the editor.\r\n     * \r\n     * @param from Where to start the selection\r\n     * @param to Where to stop the selection\r\n     * @param line If its a line selection or a word selection\r\n     * @returns The text selection\r\n     */\r\n    async select(from: number, to: number, line: boolean) {\r\n        const [editor, e] = this.getEditor()\r\n\r\n        if (editor == null) throw e\r\n\r\n        if (line) {\r\n            const lastCharacter = editor.getLine(to - 1).length\r\n\r\n            editor.setSelection({ line: from - 1, ch: 0 }, { line: to - 1, ch: lastCharacter })\r\n\r\n            return editor.getSelection()\r\n        }\r\n\r\n        const currentLine = editor.getCursor().line\r\n\r\n        editor.setSelection({ line: currentLine, ch: from }, { line: currentLine, ch: to + 1 })\r\n\r\n        return editor.getSelection()\r\n    }\r\n\r\n    /**\r\n     * Retrieves the content of the provided line\r\n     * \r\n     * @param number | undefined line number\r\n     */\r\n    async getLine(number?: number): Promise<{ lineNumber: number, text: string, _text: string, _line: number, character: number } | Error> {\r\n        const [editor, e] = this.getEditor()\r\n\r\n        if (editor == null) throw e\r\n\r\n        number = number != null ? number : editor.getCursor().line\r\n\r\n        const text = editor.getLine(number)\r\n\r\n        return {\r\n            _line: number,\r\n            lineNumber: number,\r\n            _text: text,\r\n            text: text,\r\n            character: editor.getCursor().ch\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indents the provided selection or the active one.\r\n     *\r\n     * @param p1 Start string[] (line, cursor)\r\n     * @param p2 Finish string[] (line, cursor)\r\n     */\r\n    async indentSelection(p1?: [string, string], p2?: [string, string]) {\r\n        const [editor, e] = this.getEditor()\r\n\r\n        if (editor == null) throw e\r\n\r\n        const cursor = editor.getCursor()\r\n\r\n        if (p1 == null || p2 == null) {\r\n            const lines = editor.lastLine()\r\n\r\n            editor.setSelection({ line: 0, ch: 0 }, { line: lines, ch: editor.getLine(lines).length })\r\n\r\n            editor.execCommand('indentAuto')\r\n\r\n            return editor.setCursor(cursor)\r\n        }\r\n\r\n        p1[0] = p1[0] ?? cursor.line\r\n        p2[0] = p2[0] ?? cursor.line\r\n\r\n        const sp1 = p1.map(a => parseInt(a, 10))\r\n        const sp2 = p2.map(a => parseInt(a, 10))\r\n\r\n        sp1[0] = Math.max(0, sp1[0])\r\n        sp2[0] = Math.min(editor.lineCount(), sp2[0])\r\n\r\n        editor.setSelection({ line: sp1[0], ch: sp1[1] }, { line: sp2[0], ch: sp2[1] })\r\n\r\n        editor.execCommand('indentAuto')\r\n\r\n        return editor.setCursor(cursor)\r\n    }\r\n\r\n    /**\r\n     * Writes something in the terminal and press enter.\r\n     * \r\n     * @param text Text to be written in the terminal\r\n     * @returns void\r\n     */\r\n    async writeOnTerminal(text: string): Promise<void | Error> {\r\n\r\n        // major short cut :(\r\n        this.runCode()\r\n\r\n        return\r\n    }\r\n\r\n    /**\r\n     * Retrieves information about a file\r\n     * \r\n     * @param text Which file we are looking for information about, if undefined current file.\r\n     * @returns \r\n     */\r\n    async fileInfo(text?: string): Promise<Record<string, any> | Error> {\r\n        return {\r\n            fileName: 'MyLittleDarkAge.js'\r\n        }\r\n    }\r\n\r\n    private runThisCode(code: string) {\r\n        return new Promise<string>((res, rej) => {\r\n            try {\r\n                // eslint-disable-next-line no-eval\r\n                eval(`\r\n                    console.defaultLog = console.log.bind(console);\r\n                    console.logs = [];\r\n                    console.log = function() {\r\n                        console.defaultLog.apply(console, arguments);\r\n                        console.logs.push(Array.from(arguments));\r\n                    }\r\n    \r\n                    ${code}\r\n                `)\r\n\r\n                const text = console.logs!.map(item => item.join(' ')).join('\\n')\r\n\r\n                setTimeout(() => res(text), 1500)\r\n            } catch (ex) {\r\n                setTimeout(() => rej(ex.toString()), 1500)\r\n            } finally {\r\n                if (console.defaultLog) {\r\n                    console.log = console.defaultLog.bind(console)\r\n                    delete console['defaultLog']\r\n                }\r\n\r\n                delete console['logs']\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction Log(item: any) {\r\n    console.log(item)\r\n}\r\n\r\nexport default new CodeMirrorEditor()"],"sourceRoot":""}