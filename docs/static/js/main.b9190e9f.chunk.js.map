{"version":3,"sources":["pages/@components/utils.ts","index.tsx"],"names":["langs","parseRoute","root","paths","window","location","pathname","split","filter","item","find","splice","lang","route","App","React","lazy","WebApp","OuterRouter","props","Page","UnderConstruction","NotFound","Suspense","fallback","comp","Promise","resolve","default","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KAMA,IAAMA,EAAQ,CAAC,CAAC,KAAM,SAAU,CAAC,KAAM,UAEhC,SAASC,IAAc,IAAD,EAGxBC,EAFEC,EAAQC,OAAOC,SAASC,SAASC,MAAM,KAAKC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAG7DT,EAAMU,MAAK,yCAAiBP,EAAM,QACrCA,EAAMQ,OAAO,EAAG,EAAGX,EAAM,GAAG,IAC5BE,EAAO,IAGR,IAAMU,EAAOZ,EAAMU,MAAK,yCAAiBP,EAAM,OAAOH,EAAM,GACtDa,EAAQV,EAAM,IAAM,QAE1B,MAAO,CAAES,KAAMA,EAAK,GAAIV,KAAI,UAAEA,SAAF,QAAUU,EAAK,GAAIC,W,+BCpBhD,yDAGMC,EAAMC,IAAMC,MAAK,kBAAM,sDACvBC,EAASF,IAAMC,MAAK,kBAAM,oEAQ1BE,EAAc,SAACC,GAAgB,IAAD,EACXlB,cAAhBW,EAD2B,EAC3BA,KAAMC,EADqB,EACrBA,MAEVO,EAAO,KAOX,OALqBA,EAAP,QAAVP,EAAwBC,EACT,WAAVD,EAA2BI,EACDD,EAAhB,UAAVH,EAA+BQ,EACvBC,GAGhB,cAAC,IAAMC,SAAP,CAAgBC,SAAU,sCAA1B,SACC,cAACJ,EAAD,CAAMR,KAAMA,OAKTI,EAAO,SAACS,GAAD,OAAyBV,IAAMC,MAAK,kBAAMU,QAAQC,QAAQ,CAAEC,QAASH,QAE5EH,EAA+B,WACpC,OAAO,yDAA4BlB,OAAOC,SAASC,aAG9Ce,EAAwC,WAC7C,OAAO,wFAGRQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAACb,EAAD,MAEDc,SAASC,eAAe,W","file":"static/js/main.b9190e9f.chunk.js","sourcesContent":["export function isRoute(guess: string) {\r\n\tconst { pathname } = window.location\r\n\r\n\treturn new RegExp('^/' + guess + '(/|)$').test(pathname)\r\n}\r\n\r\nconst langs = [['en', 'en-US'], ['pt', 'pt-BR']]\r\n\r\nexport function parseRoute() {\r\n\tconst paths = window.location.pathname.split('/').filter(item => item !== '')\r\n\r\n\tlet root\r\n\tif(!langs.find(([ c ]) => c === paths[0])) {\r\n\t\tpaths.splice(0, 0, langs[0][0])\r\n\t\troot = ''\r\n\t}\r\n\r\n\tconst lang = langs.find(([ c ]) => c === paths[0]) || langs[0]\r\n\tconst route = paths[1] || 'index'\r\n\r\n\treturn { lang: lang[1], root: root ?? lang[0], route }\r\n}\r\n","import React, { ComponentType } from 'react'\nimport ReactDOM from 'react-dom'\nimport { parseRoute } from './pages/@components/utils'\nconst App = React.lazy(() => import('./pages/app'))\nconst WebApp = React.lazy(() => import('./pages/webapp'))\n\ndeclare global {\n\tinterface Window {\n\t\telectronShellInfo: any\n\t}\n}\n\nconst OuterRouter = (props: any) => {\n\tconst { lang, route } = parseRoute()\n\n\tlet Page = null\n\n\tif (route === 'app') Page = App\n\telse if (route === 'webapp') Page = WebApp\n\telse if (route === 'index') Page = lazy(UnderConstruction)\n\telse Page = lazy(NotFound)\n\n\treturn (\n\t\t<React.Suspense fallback={<h1>Wait</h1>}>\n\t\t\t<Page lang={lang}/>\n\t\t</React.Suspense>\n\t)\n}\n\nconst lazy = (comp: ComponentType) => React.lazy(() => Promise.resolve({ default: comp }))\n\nconst NotFound: ComponentType<any> = () => {\n\treturn <h3>Error 404 - Cannot get {window.location.pathname}</h3>\n}\n\nconst UnderConstruction: ComponentType<any> = () => {\n\treturn <h3>ðŸš§ Under construction ðŸš§ - Later!</h3>\n}\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<OuterRouter />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}