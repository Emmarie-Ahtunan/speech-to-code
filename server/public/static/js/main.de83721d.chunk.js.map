{"version":3,"sources":["../../spoken/dist/modules.js","../../spoken/dist/spoken.js","components/header/index.tsx","components/main/electron-ipc.ts","services/use-auzre-voice-recognition.ts","components/main/index.tsx","components/api.ts","components/spoken/index.tsx","App.tsx","index.tsx","../../spoken/dist/index.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","yaml_1","require","fs_1","path_1","Modules","modules","Error","moduleName","category","command","module","find","m","name","categories","desc","commands","undefined","id","Date","push","i","findIndex","c","default","writeFileSync","resolve","__dirname","stringify","Header","useState","open","setOpen","className","onClick","href","fakeIpc","send","channel","console","warn","on","cb","_ipcRenderer","window","ipcRenderer","MyRecognizer","speechConfig","audioConfig","recognizer","handlers","Map","SpeechSDK","fromSubscription","speechRecognitionLanguage","setServiceProperty","UriQueryParameter","fromDefaultMicrophoneInput","error","recognizeOnceAsync","result","log","reason","RecognizedSpeech","h","get","err","toString","close","clear","event","fn","set","findComand","voiceToTextResponse","trsc","text","matchedCommand","Spoken","matchPhrase","_rawVoiceToTextResponse","phrase","commandArgs","useAzureVoiceRecognition","results","setResults","getRecognizer","useEffect","setTimeout","IpcRenderer","init","data","destroy","start","a","stop","analyzeSentence","w","Main","recording","setRecording","editorState","setEditorState","r","e","map","cls","current","status","t","contentEditable","document","querySelector","innerText","handler","res","ok","json","statusText","fetch","then","setModules","modalInfo","setModalInfo","api","mods","values","co","title","type","readOnly","impl","entries","phrases","key","f","App","props","Router","pages","hash","component","location","setHash","hashchange","addEventListener","removeEventListener","page","ReactDOM","render","StrictMode","getElementById","modules_1","spoken_1","langs","arr","split","exec","exposeArgs","item","join","replace","RegExp","lang","findCommand","matchedPhrase","phraseToRegex","execResult","commandArgsObj","commandArgsArray","filter","argPattern","argName","list","length","JSON","getCommandArgs","predicate","_a","_b","_c","_d","categorie","call","Command","args","getDesc","idiom","makeFunction","eval","getImpl"],"mappings":"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","file":"static/js/main.de83721d.chunk.js","sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst yaml_1 = __importDefault(require(\"yaml\"));\r\nconst fs_1 = __importDefault(require(\"fs\"));\r\nconst path_1 = __importDefault(require(\"path\"));\r\nclass Modules {\r\n    constructor(modules) {\r\n        this.modules = [];\r\n        this.modules = modules;\r\n    }\r\n    newModule(modules) {\r\n        throw new Error(\"Method not implemented!\");\r\n    }\r\n    saveCommand(moduleName, category, command) {\r\n        const module = this.modules.find(m => m.name === moduleName);\r\n        if (!module)\r\n            throw new Error(\"Module not found\");\r\n        if (!module.categories[category.name]) {\r\n            module.categories[category.name] = { desc: category.desc || '', commands: [] };\r\n        }\r\n        if (command.id == undefined) {\r\n            command.id = +new Date();\r\n            module.categories[category.name].commands.push(command);\r\n        }\r\n        else {\r\n            const i = module.categories[category.name].commands.findIndex(c => c.id === command.id);\r\n            module.categories[category.name].commands[i] = command;\r\n        }\r\n        fs_1.default.writeFileSync(path_1.default.resolve(__dirname, 'spoken1.yaml'), yaml_1.default.stringify(module), 'utf-8');\r\n    }\r\n    removeCommand(module, category, command) {\r\n    }\r\n    listCommands() {\r\n        return this.modules;\r\n    }\r\n}\r\nexports.default = Modules;\r\n","exports.default = {\"name\":\"Spoken\",\"desc\":\"Spoken is language designed to be able to control a text editor by using voice commands.\",\"categories\":{\"line\":{\"desc\":\"Things related to line manipulation\",\"commands\":[{\"id\":0,\"desc\":\"Moves the cursor to a different line.\",\"phrases\":{\"en\":[\"go to line {number:numeral}\",\"line {number:numeral}\"],\"pt_br\":[\"vá para linha {number:numeral}\",\"linha {number:numeral}\"]},\"impl\":\"async function goToLine(command, editor, context) {\\n  // yara yara do something\\n  return await editor.goToLine(command.number)\\n}\\n\"},{\"id\":1,\"desc\":\"Creates a new line below the current line.\",\"phrases\":{\"en\":[\"new line below\",\"create a new line below\",\"new line\",\"create a new line\"],\"pt_br\":[\"linha nova abaixo\",\"crie uma linha nova abaixo\",\"linha nova\",\"crie uma linha nova\"]},\"impl\":\"async function newLineBelow(command, editor, context) {\\n  return await editor.newLine()\\n}\\n\"},{\"id\":2,\"desc\":\"Creates a new line above the current line.\",\"phrases\":{\"en\":[\"new line above\",\"create a new line above\"],\"pt_br\":[\"linha nova acima\",\"crie uma linha nova acima\"]},\"impl\":\"function newLineAbove(command, editor, context) {\\n  // yara yara something\\n}\\n\"},{\"id\":3,\"desc\":\"Removes the specified line. If none was provided the current line will be removed.\",\"phrases\":{\"en\":[\"remove line {numeral}\",\"remove the line {numeral}\"],\"pt_br\":[\"remova linha {numeral}\",\"remova a linha {numeral}\"]},\"impl\":\"function removeLine(command, editor, context) {\\n  // yara yara something\\n}\\n\"},{\"id\":4,\"desc\":\"Selects the specifed term in the specified line, if no line was provided the current will be used.\",\"phrases\":{\"en\":[\"select the {term} in the line {numeral}\",\"select {term} on line {numeral}\"],\"pt_br\":[\"selecione o termo {term} na linha {numeral}\",\"selecione {term} na linha {numeral}\",\"na linha {numeral} selecione {term}\"]},\"impl\":\"function selectTerm(command, editor, context) {\\n  // yara yara something\\n}\\n\"}]},\"write\":{\"desc\":\"Things related to text input\",\"commands\":[{\"id\":1024,\"desc\":\"Just write something.\",\"phrases\":{\"en\":[\"write {text:any}\",\"write the following term {text:any}\"],\"pt_br\":[\"escreva {text:any}\",\"escreva o seguinte termo {text:any}\"]},\"impl\":\"async function write(command, editor, context) {\\n  console.log('[Spoken]: Executing:\\\\n\\\\t \\\"Write {term}\\\"')\\n  return await editor.write(command.text)\\n}\\n\"},{\"id\":1025,\"desc\":\"Declares a constant or a variable.\",\"phrases\":{\"en\":[\"declare a {memType:constant|variable} called {name:term}\",\"declare a {memType:constant|variable} called {name:term} with value {value:term}\",\"declare a {memType:constant|variable} called {name:term} of type {type:term}\",\"declare a {memType:constant|variable} called {name:term} of type {type:term} with value {value:term}\"],\"pt_br\":[\"declare uma {memType:constante|variável} chamada {name:term}\",\"declare uma {memType:constante|variável} chamada {name:term} com o valor {value:term}\",\"declare uma {memType:constante|variável} chamada {name:term} do tipo {type:term}\",\"declare uma {memType:constante|variável} chamada {name:term} do tipo {type:term} com o valor {value:term}\",\"declaro uma {memType:constante|variável} chamada {name:term}\",\"declaro uma {memType:constante|variável} chamada {name:term} com o valor {value:term}\",\"declaro uma {memType:constante|variável} chamada {name:term} do tipo {type:term}\",\"declaro uma {memType:constante|variável} chamada {name:term} do tipo {type:term} com o valor {value:term}\",\"declaro uma {memType:constante|variável} chamada {name:term} com valor {value:term}\",\"declaro uma {memType:constante|variável} chamada {name:term} do tipo {type:term} com valor {value:term}\",\"declare uma {memType:constante|variável} chamada {name:term} com valor {value:term}\",\"declare uma {memType:constante|variável} chamada {name:term} do tipo {type:term} com valor {value:term}\"]},\"impl\":\"async function declareConst(c, editor, context) {\\n  console.log('[Spoken]: Executing: \\\"Declare a variable.\\\"')\\n  // const { text, lineNumber } = editor.getLine()\\n  const memType = parseInt(c.memType || 0, 10) === 0 ? 'const ' : 'let '\\n  const type = c.type ? `:${c.type}` : ''\\n  const value = c.value ? ` = ${c.value}` : '' \\n\\n  const text = `${memType}${c.name}${type}${value}`\\n\\n  await editor.write(text)\\n  return await editor.indentSelection([undefined, 0], [undefined, text.length])\\n}\\n\"}]}}}","import React, { useState } from 'react'\r\n\r\nexport default function Header() {\r\n    const [open, setOpen] = useState(false)\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"menu\">\r\n                <div className=\"icon\" onClick={() => setOpen(!open)}>\r\n                    ☰\r\n                </div>\r\n            </div>\r\n            <div className={`menu-items ${open ? 'open' : ''}`}>\r\n                <div className=\"about\">\r\n                    <div className=\"title\">Speech To Code</div>\r\n                    <div className=\"sub\">by Pedro Augusto</div>\r\n                </div>\r\n                <div className=\"divider\"></div>\r\n                <ul>\r\n                    <li><a href=\"/#\" onClick={() => setOpen(!open)}>Home</a></li>\r\n                    <li><a href=\"/#/spoken\" onClick={() => setOpen(!open)}>Spoken</a></li>\r\n                </ul>\r\n            </div>\r\n            <div className={`menu-items-shade ${open ? 'open' : ''}`} onClick={() => setOpen(!open)}></div>\r\n            <div className=\"brand\">\r\n                <div className=\"title\">{'>'} ./speech-to-code</div>\r\n            </div>\r\n        </header>\r\n    )\r\n}","type ElectronIpc = {\r\n    send: (channel: string, ...args: any) => void,\r\n    on: (channel: string, cb: (...args: any) => void) => void\r\n}\r\n\r\nconst fakeIpc: ElectronIpc = {\r\n    send(channel) { console.warn('IPC not defined (this is a electron application!)') },\r\n    on(channel, cb) { console.warn('IPC not defined (this is a electron application!)') }\r\n}\r\n\r\n// @ts-ignore\r\nconst _ipcRenderer: ElectronIpc = window?.ipcRenderer || fakeIpc\r\n\r\nexport default _ipcRenderer\r\nexport { _ipcRenderer as ipcRenderer }\r\n","import { useState, useCallback, useEffect } from 'react'\r\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk'\r\nimport { VoiceRecognitionHook } from './use-voice-recognition'\r\nimport IpcRenderer from '../components/main/electron-ipc'\r\n// @ts-ignore\r\nimport Spoken from 'spoken'\r\n\r\nconst useAzureVoiceRecognition: VoiceRecognitionHook = () => {\r\n    const [results, setResults] = useState('')\r\n    const recognizer = MyRecognizer.getRecognizer()\r\n\r\n    useEffect(() => {\r\n        console.log('[webapp.services.azure-voice-recognition]: Initialized')\r\n\r\n        recognizer\r\n            .on('results', (result: SpeechSDK.SpeechRecognitionResult) => {\r\n                // setResults(result.text)\r\n                setTimeout(() => IpcRenderer.send('Spoken:analyze', findComand(result)), 1000)\r\n            })\r\n            .on('error', (err) => {\r\n                console.error('[webapp.services.azure-voice-recognition.onResultError]: Error', err.toString())\r\n            })\r\n            .init()\r\n\r\n        // Inter process comunication: listen to node context requests\r\n        IpcRenderer.on('Spoken:analysisResults', (data) => {\r\n            setResults(data.phrase)\r\n        })\r\n\r\n        return () => {\r\n            recognizer.destroy()\r\n        }\r\n    }, [])\r\n\r\n    const start = async () => {\r\n        recognizer.start()\r\n    }\r\n\r\n    const stop = async () => {\r\n        recognizer.stop()\r\n    }\r\n\r\n    const analyzeSentence = async (phrase: string) => {\r\n        const w = { text: phrase }\r\n        setTimeout(() => IpcRenderer.send('Spoken:analyze', findComand(w as unknown as SpeechSDK.SpeechRecognitionResult)), 3000)\r\n    }\r\n\r\n    return {\r\n        results,\r\n        start,\r\n        stop,\r\n        analyzeSentence\r\n    }\r\n}\r\n\r\nclass MyRecognizer {\r\n    static recognizer : MyRecognizer | null = null\r\n    private speechConfig: SpeechSDK.SpeechConfig | null = null\r\n    private audioConfig: SpeechSDK.AudioConfig | null = null\r\n    private recognizer: SpeechSDK.SpeechRecognizer | null = null\r\n    private handlers = new Map<string, Function>()\r\n\r\n    static getRecognizer(): MyRecognizer {\r\n        if (MyRecognizer.recognizer == null) {\r\n            MyRecognizer.recognizer = new MyRecognizer()\r\n        }\r\n\r\n        return MyRecognizer.recognizer\r\n    }\r\n\r\n    constructor() {}\r\n\r\n    init() {\r\n        // THIS IS BAD!\r\n        // https://github.com/Azure-Samples/AzureSpeechReactSample\r\n        // https://github.com/Azure-Samples/cognitive-services-speech-sdk/blob/master/quickstart/javascript/browser/from-microphone/index.html\r\n        this.speechConfig = SpeechSDK.SpeechConfig.fromSubscription('PEDRO_AUG', 'brazilsouth')\r\n        this.speechConfig.speechRecognitionLanguage = 'pt-BR'\r\n        this.speechConfig.setServiceProperty('punctuation', 'explicit', SpeechSDK.ServicePropertyChannel.UriQueryParameter);\r\n        this.audioConfig  = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput()\r\n        this.recognizer = new SpeechSDK.SpeechRecognizer(this.speechConfig, this.audioConfig)\r\n    }\r\n\r\n    start() {\r\n        if (this.recognizer == null) return console.error('[webapp.services.azure-voice-recognition]: Session is closed!')\r\n\r\n        this.recognizer.recognizeOnceAsync(result => {\r\n            console.log('[webapp.services.azure-voice-recognition]: Results ', result)\r\n            if(result.reason == SpeechSDK.ResultReason.RecognizedSpeech) {\r\n                const h = this.handlers.get('results')\r\n\r\n                if(h != null) h(result)\r\n            } else {\r\n                const h = this.handlers.get('error')\r\n\r\n                if(h != null) h({ err: new Error('Something went wrong!'), result })\r\n            }\r\n        }, (err) => {\r\n            console.log('[webapp.services.azure-voice-recognition]: Err ' + err.toString())\r\n\r\n            const h = this.handlers.get('error')\r\n\r\n            if(h != null) h({ err: new Error('Something went wrong!'), result: null })\r\n        })\r\n    }\r\n\r\n    stop() {\r\n        if (this.recognizer == null) return console.error('[webapp.services.azure-voice-recognition]: Session is closed!')\r\n\r\n        // this.recognizer.close()\r\n    }\r\n\r\n    destroy () {\r\n        this.recognizer?.close()\r\n        this.recognizer = null\r\n        this.audioConfig = null\r\n        this.handlers.clear()\r\n    }\r\n\r\n    on(event: string, fn: (...args: any) => void) {\r\n        this.handlers.set(event, fn)\r\n\r\n        return this\r\n    }\r\n}\r\n\r\n\r\nfunction findComand(voiceToTextResponse: SpeechSDK.SpeechRecognitionResult) {\r\n    console.log('[webapp.services.azure-voice-recognition] Warn: Ignoring other matches!')\r\n\r\n    const trsc = voiceToTextResponse.text\r\n    const matchedCommand = Spoken.matchPhrase(trsc, 'pt_br')\r\n\r\n    return {\r\n        _rawVoiceToTextResponse: voiceToTextResponse,\r\n        phrase: [trsc],\r\n        command: matchedCommand ? {\r\n            ...matchedCommand.command,\r\n            commandArgs: matchedCommand.commandArgs,\r\n        } : null\r\n    }\r\n}\r\n\r\nexport default useAzureVoiceRecognition\r\n","import React, { useState, useEffect } from 'react'\r\nimport IpcRenderer from './electron-ipc'\r\nimport { useVoiceRecognition } from './voice-recognition'\r\nimport useAzureVoiceRecognition from '../../services/use-auzre-voice-recognition'\r\n\r\nexport default function Main() {\r\n    const [recording, setRecording] = useState(false)\r\n    const [editorState, setEditorState] = useState([])\r\n\r\n    const { results, start, stop, analyzeSentence } = useAzureVoiceRecognition() //useVoiceRecognition()\r\n\r\n    const toggleRecording = () => {\r\n        recording ? stop() : start()\r\n        setRecording(!recording)\r\n    }\r\n\r\n    const changeEditor = (t: string) => {\r\n        IpcRenderer.send('Config:changeEditor', t)\r\n    }\r\n\r\n    const analyze = () => {\r\n        const text = (document.querySelector('.transcription-text.input') as HTMLElement)?.innerText\r\n        setTimeout(() => analyzeSentence(text), 4000)\r\n    }\r\n\r\n    useEffect(() => {\r\n        IpcRenderer.on('VoiceRecognition:toggleRecording', (r) => {\r\n            r ? start() : stop()\r\n            setRecording(r)\r\n        })\r\n\r\n        IpcRenderer.on('Config:onChangeEditorState', (e) => {\r\n            setEditorState(e)\r\n        })\r\n\r\n        // Request the current editor\r\n        IpcRenderer.send('Config:changeEditor', null)\r\n    }, [])\r\n\r\n    return (\r\n        <main className=\"main\">\r\n            <div className=\"editor-in-use\">\r\n                <div>Editors:</div>\r\n                <ul>\r\n                    {editorState.map(({ name, current, status }) => {\r\n                        const cls = (current ? 'selected ' : '') + (status === 'ON' ? 'on' : '')\r\n\r\n                        return (\r\n                            <li\r\n                                className={cls}\r\n                                onClick={() => changeEditor(name)}                                \r\n                            >\r\n                                {name}\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className={`record ${recording ? 'on' : 'off'}`}>\r\n                <div className=\"btn\" onClick={toggleRecording}></div>\r\n                <div className=\"label\"><b>{recording ? 'Stop': 'Start'}</b> recording</div>\r\n            </div>\r\n            <div className=\"transcription\">\r\n                <label>Transcription:</label>\r\n                <div className=\"transcription-text\">{results}</div>\r\n            </div>\r\n            <div className=\"debug\">\r\n                <label>Debug:</label>\r\n                <div className=\"transcription-text input\" contentEditable></div>\r\n                <button onClick={analyze}>Analyze</button>\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n","const url = 'http://localhost:3000/spoken/list'\r\n\r\nconst handler = (res: Response) => {\r\n    if (res.ok) return res.json()\r\n    const err = new Error(\"[Rest API Error] \" + res.statusText)\r\n    console.error(err)\r\n    throw err\r\n}\r\n\r\nexport default {\r\n    getSpokenModules() {\r\n        return fetch(url).then(handler)\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport api from '../api'\r\n\r\ntype ModuleDefinition = {\r\n    name: string,\r\n    desc: string,\r\n    categories: {\r\n        [key: string]:  {\r\n            desc: string,\r\n            commands: CommandDefinition[]\r\n        }\r\n    } | { desc: string, commands: CommandDefinition[] }\r\n}\r\n\r\ntype ModalInfo = {\r\n    module: ModuleDefinition,\r\n    category: {\r\n        [key: string]:  {\r\n            desc: string,\r\n            commands: CommandDefinition[]\r\n        }\r\n    },\r\n    command: CommandDefinition\r\n}\r\n\r\ntype CommandDefinition = {\r\n    id: number,\r\n    desc: string,\r\n    phrases: {\r\n        [key: string]: string[]\r\n    }\r\n    impl: string\r\n}\r\n\r\n\r\nexport default function Spoken() {\r\n    const [modules, setModules] = useState<ModuleDefinition[]>([])\r\n    const [modalInfo, setModalInfo] = useState<null | ModalInfo>(null)\r\n    const [open, setOpen] = useState(false)\r\n\r\n    useEffect(() => {\r\n        api.getSpokenModules().then((mods) => {\r\n            setModules(mods)\r\n            /*setModalInfo({\r\n                module: mods[0],\r\n                category: mods[0].categories.line,\r\n                command: mods[0].categories.line.commands[0]\r\n            })*/\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <main className=\"spoken\">\r\n            <div className=\"wrapper\">\r\n                <h2>Modules</h2>\r\n                {/*<div className=\"search-box\">\r\n                    <input type=\"text\" name=\"search\" autocomplete=\"off\" />\r\n                </div>*/}\r\n                {modules.map(m => {\r\n                    return (\r\n                        <div className={`module ${open ? 'open' : ''}`}>\r\n                            <div className=\"module__title\">\r\n                                {m.name}\r\n                                <span onClick={() => setOpen(!open)}>❯</span>\r\n                            </div>\r\n                            <div className=\"module__desc\">{m.desc}</div>\r\n                            <div className=\"module__commands\">\r\n                                <ul>\r\n                                    {Object.values(m.categories).map(c => {\r\n                                        return c.commands.map((co: CommandDefinition) => {\r\n                                            return (\r\n                                                <li\r\n                                                    onClick={() => setModalInfo({ module: m, category: c, command: co })}\r\n                                                >\r\n                                                    {co.desc}\r\n                                                </li>\r\n                                            )\r\n                                        })\r\n                                    })}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            {modalInfo !== null && (\r\n                <div className=\"module__details\">\r\n                    <div className=\"module__details__wrapper\">\r\n                        <div className=\"module__main-header\">\r\n                            <h2>{modalInfo.module.name}</h2>\r\n                            <span title=\"close\" onClick={() => setModalInfo(null)}>×</span>\r\n                            <div>{modalInfo.module.desc}</div>\r\n                        </div>\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"module__main\">\r\n                            <h4>Command:</h4>\r\n                            <div className=\"field\">\r\n                                <div className=\"label\">#ID:</div>\r\n                                <input type=\"text\" readOnly className=\"value\" value={modalInfo.command.id}/>\r\n                            </div>\r\n                            <div className=\"field desc\">\r\n                                <div className=\"label\">Description:</div>\r\n                                <textarea>{modalInfo.command.desc}</textarea>\r\n                            </div>\r\n                            <div className=\"field impl\">\r\n                                <div className=\"label\">Implementation:</div>\r\n                                <textarea>{modalInfo.command.impl}</textarea>\r\n                            </div>\r\n                            <div className=\"field phrases\">\r\n                                <div className=\"label\">Phrases:</div>\r\n                                <ul className=\"idioms\">\r\n                                    {Object.entries(modalInfo.command.phrases).map(([key, value]) => {\r\n                                        return (\r\n                                            <li className=\"idiom\">\r\n                                                <input type=\"text\" value={key} name=\"lang\"/>\r\n                                                <ul className=\"commands\">\r\n                                                    {value.map(f => <li><input type=\"text\" value={f} name=\"phrase\"/></li>)}\r\n                                                </ul>\r\n                                            </li>\r\n                                        )\r\n                                    })}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"module__footer\">\r\n                        <button>Save</button>\r\n                        <button>Remove</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </main>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport Header from './components/header'\r\nimport Main from './components/main'\r\nimport Spoken from './components/spoken'\r\n\r\nexport default function App (props: any) {\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <Router\r\n                pages={[\r\n                    { hash: '', component: Main },\r\n                    { hash: '#/spoken', component: Spoken }\r\n                ]}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Router(props: { pages: { hash: string, component: React.FC }[] }) {\r\n    const [hash, setHash] = useState(window.location.hash)\r\n\r\n    useEffect(() => {\r\n        function hashchange() {\r\n            setHash(window.location.hash)\r\n        }\r\n\r\n        window.addEventListener('hashchange', hashchange)\r\n\r\n        return () => {\r\n            window.removeEventListener('hashchange', hashchange)\r\n        }\r\n\r\n    }, [])\r\n\r\n    const page = props.pages.find((page) => page.hash === hash)\r\n\r\n    return page ? <page.component /> : null\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst modules_1 = __importDefault(require(\"./modules\"));\r\n// @ts-ignore\r\nconst spoken_1 = __importDefault(require(\"./spoken\"));\r\nclass Spoken {\r\n    constructor() {\r\n        this.langs = [];\r\n        this.langs.push(spoken_1.default.default);\r\n        this.modules = new modules_1.default(this.langs);\r\n    }\r\n    exposeArgs(text) {\r\n        const arr = text.split(' ');\r\n        const result = [];\r\n        for (const w of arr) {\r\n            const r = /^{(\\S*):(\\S*)}$/gi.exec(w);\r\n            result.push([r ? `{${r[2]}}` : w, r ? r[1] : null]);\r\n        }\r\n        return result;\r\n    }\r\n    phraseToRegex(text) {\r\n        text = this.exposeArgs(text).map(item => item[0]).join(' ');\r\n        text = text\r\n            .replace(/{any}/gi, '(.*)')\r\n            .replace(/{term}/gi, '(\\\\S+)')\r\n            .replace(/{numeral}/gi, '(\\\\d+)')\r\n            .replace(/{(\\S*)}/gi, '($1)') + '$';\r\n        return new RegExp(text, 'gi');\r\n    }\r\n    matchPhrase(phrase, lang) {\r\n        console.log('[Spoken.matchPhrase] Looking for a match for: ' + phrase);\r\n        const c = this.findCommand(command => {\r\n            const matchedPhrase = command.phrases[lang].find(item => {\r\n                return this.phraseToRegex(item).exec(phrase);\r\n            });\r\n            if (matchedPhrase) {\r\n                const execResult = this.phraseToRegex(matchedPhrase).exec(phrase);\r\n                if (!execResult)\r\n                    return false;\r\n                const commandArgsObj = {};\r\n                const commandArgsArray = this.exposeArgs(matchedPhrase).filter(a => !!a[1]);\r\n                // @TODO This can be very simplified the first element of the list\r\n                // dont need to be in the loop\r\n                for (let i = 0; i < execResult.length; i++) {\r\n                    if (i === 0) {\r\n                        commandArgsObj.phrase = execResult[i];\r\n                    }\r\n                    else {\r\n                        // its a list: {a|b|c} -> 0, 1, 2\r\n                        const [argPattern, argName] = commandArgsArray[i - 1];\r\n                        // {(word|)+word}\r\n                        const list = /{((\\S+\\|)+\\S*\\w)}/gi.exec(argPattern);\r\n                        if (!list)\r\n                            commandArgsObj[argName] = execResult[i];\r\n                        else\r\n                            commandArgsObj[argName] = list[1].split(\"|\").findIndex(a => a === execResult[i]);\r\n                    }\r\n                }\r\n                return commandArgsObj;\r\n            }\r\n            return false;\r\n        });\r\n        if (c)\r\n            console.log('[Spoken.matchPhrase] Match found at: ' + JSON.stringify(c.getCommandArgs()));\r\n        else\r\n            console.log('[Spoken.matchPhrase] Match not found');\r\n        return c;\r\n    }\r\n    matchId(id) {\r\n        return this.findCommand(a => a.id === id);\r\n    }\r\n    findCommand(predicate) {\r\n        var _a, _b, _c, _d;\r\n        for (const lang of this.langs) {\r\n            for (const categorie in (lang.categories || {})) {\r\n                const command = (_d = (_c = (_b = (_a = lang.categories) === null || _a === void 0 ? void 0 : _a[categorie]) === null || _b === void 0 ? void 0 : _b.commands) === null || _c === void 0 ? void 0 : _c.find) === null || _d === void 0 ? void 0 : _d.call(_c, predicate);\r\n                if (command) {\r\n                    return new Command(command, predicate(command));\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\nclass Command {\r\n    constructor(command, args) {\r\n        this.command = command;\r\n        this.commandArgs = args;\r\n    }\r\n    getId() {\r\n        return this.command.id;\r\n    }\r\n    getDesc() {\r\n        return this.getDesc();\r\n    }\r\n    getCommandArgs() {\r\n        return this.commandArgs;\r\n    }\r\n    getPhrases(idiom) {\r\n        if (idiom == undefined)\r\n            return this.command.phrases;\r\n        return this.command.phrases[idiom];\r\n    }\r\n    getImpl() {\r\n        return this.command.impl;\r\n    }\r\n    makeFunction() {\r\n        return eval(`(() => ${this.getImpl()})()`);\r\n    }\r\n}\r\nexports.default = new Spoken();\r\n"],"sourceRoot":""}